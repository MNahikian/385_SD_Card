// DE2_115_SD_CARD_NIOS_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module DE2_115_SD_CARD_NIOS_mm_interconnect_1 (
		input  wire        altpll_c0_clk,                                          //                                        altpll_c0.clk
		input  wire        altpll_c2_clk,                                          //                                        altpll_c2.clk
		input  wire        sys_sdram_pll_0_sys_clk_clk,                            //                          sys_sdram_pll_0_sys_clk.clk
		input  wire        clock_crossing_io_m0_reset_reset_bridge_in_reset_reset, // clock_crossing_io_m0_reset_reset_bridge_in_reset.reset
		input  wire        epp_i2c_scl_reset_reset_bridge_in_reset_reset,          //          epp_i2c_scl_reset_reset_bridge_in_reset.reset
		input  wire        ir_reset_reset_bridge_in_reset_reset,                   //                   ir_reset_reset_bridge_in_reset.reset
		input  wire        lcd_reset_reset_bridge_in_reset_reset,                  //                  lcd_reset_reset_bridge_in_reset.reset
		input  wire        to_sw_sig_reset_reset_bridge_in_reset_reset,            //            to_sw_sig_reset_reset_bridge_in_reset.reset
		input  wire [8:0]  clock_crossing_io_m0_address,                           //                             clock_crossing_io_m0.address
		output wire        clock_crossing_io_m0_waitrequest,                       //                                                 .waitrequest
		input  wire [0:0]  clock_crossing_io_m0_burstcount,                        //                                                 .burstcount
		input  wire [3:0]  clock_crossing_io_m0_byteenable,                        //                                                 .byteenable
		input  wire        clock_crossing_io_m0_read,                              //                                                 .read
		output wire [31:0] clock_crossing_io_m0_readdata,                          //                                                 .readdata
		output wire        clock_crossing_io_m0_readdatavalid,                     //                                                 .readdatavalid
		input  wire        clock_crossing_io_m0_write,                             //                                                 .write
		input  wire [31:0] clock_crossing_io_m0_writedata,                         //                                                 .writedata
		input  wire        clock_crossing_io_m0_debugaccess,                       //                                                 .debugaccess
		output wire [1:0]  epp_i2c_scl_s1_address,                                 //                                   epp_i2c_scl_s1.address
		output wire        epp_i2c_scl_s1_write,                                   //                                                 .write
		input  wire [31:0] epp_i2c_scl_s1_readdata,                                //                                                 .readdata
		output wire [31:0] epp_i2c_scl_s1_writedata,                               //                                                 .writedata
		output wire        epp_i2c_scl_s1_chipselect,                              //                                                 .chipselect
		output wire [1:0]  epp_i2c_sda_s1_address,                                 //                                   epp_i2c_sda_s1.address
		output wire        epp_i2c_sda_s1_write,                                   //                                                 .write
		input  wire [31:0] epp_i2c_sda_s1_readdata,                                //                                                 .readdata
		output wire [31:0] epp_i2c_sda_s1_writedata,                               //                                                 .writedata
		output wire        epp_i2c_sda_s1_chipselect,                              //                                                 .chipselect
		output wire [1:0]  i2c_scl_s1_address,                                     //                                       i2c_scl_s1.address
		output wire        i2c_scl_s1_write,                                       //                                                 .write
		input  wire [31:0] i2c_scl_s1_readdata,                                    //                                                 .readdata
		output wire [31:0] i2c_scl_s1_writedata,                                   //                                                 .writedata
		output wire        i2c_scl_s1_chipselect,                                  //                                                 .chipselect
		output wire [1:0]  i2c_sda_s1_address,                                     //                                       i2c_sda_s1.address
		output wire        i2c_sda_s1_write,                                       //                                                 .write
		input  wire [31:0] i2c_sda_s1_readdata,                                    //                                                 .readdata
		output wire [31:0] i2c_sda_s1_writedata,                                   //                                                 .writedata
		output wire        i2c_sda_s1_chipselect,                                  //                                                 .chipselect
		output wire [1:0]  ir_s1_address,                                          //                                            ir_s1.address
		input  wire [31:0] ir_s1_readdata,                                         //                                                 .readdata
		output wire [1:0]  key_s1_address,                                         //                                           key_s1.address
		output wire        key_s1_write,                                           //                                                 .write
		input  wire [31:0] key_s1_readdata,                                        //                                                 .readdata
		output wire [31:0] key_s1_writedata,                                       //                                                 .writedata
		output wire        key_s1_chipselect,                                      //                                                 .chipselect
		output wire [1:0]  lcd_control_slave_address,                              //                                lcd_control_slave.address
		output wire        lcd_control_slave_write,                                //                                                 .write
		output wire        lcd_control_slave_read,                                 //                                                 .read
		input  wire [7:0]  lcd_control_slave_readdata,                             //                                                 .readdata
		output wire [7:0]  lcd_control_slave_writedata,                            //                                                 .writedata
		output wire        lcd_control_slave_begintransfer,                        //                                                 .begintransfer
		output wire [1:0]  ledg_s1_address,                                        //                                          ledg_s1.address
		output wire        ledg_s1_write,                                          //                                                 .write
		input  wire [31:0] ledg_s1_readdata,                                       //                                                 .readdata
		output wire [31:0] ledg_s1_writedata,                                      //                                                 .writedata
		output wire        ledg_s1_chipselect,                                     //                                                 .chipselect
		output wire [1:0]  ledr_s1_address,                                        //                                          ledr_s1.address
		output wire        ledr_s1_write,                                          //                                                 .write
		input  wire [31:0] ledr_s1_readdata,                                       //                                                 .readdata
		output wire [31:0] ledr_s1_writedata,                                      //                                                 .writedata
		output wire        ledr_s1_chipselect,                                     //                                                 .chipselect
		output wire [2:0]  rs232_s1_address,                                       //                                         rs232_s1.address
		output wire        rs232_s1_write,                                         //                                                 .write
		output wire        rs232_s1_read,                                          //                                                 .read
		input  wire [15:0] rs232_s1_readdata,                                      //                                                 .readdata
		output wire [15:0] rs232_s1_writedata,                                     //                                                 .writedata
		output wire        rs232_s1_begintransfer,                                 //                                                 .begintransfer
		output wire        rs232_s1_chipselect,                                    //                                                 .chipselect
		output wire [1:0]  sd_clk_s1_address,                                      //                                        sd_clk_s1.address
		output wire        sd_clk_s1_write,                                        //                                                 .write
		input  wire [31:0] sd_clk_s1_readdata,                                     //                                                 .readdata
		output wire [31:0] sd_clk_s1_writedata,                                    //                                                 .writedata
		output wire        sd_clk_s1_chipselect,                                   //                                                 .chipselect
		output wire [1:0]  sd_cmd_s1_address,                                      //                                        sd_cmd_s1.address
		output wire        sd_cmd_s1_write,                                        //                                                 .write
		input  wire [31:0] sd_cmd_s1_readdata,                                     //                                                 .readdata
		output wire [31:0] sd_cmd_s1_writedata,                                    //                                                 .writedata
		output wire        sd_cmd_s1_chipselect,                                   //                                                 .chipselect
		output wire [1:0]  sd_dat_s1_address,                                      //                                        sd_dat_s1.address
		output wire        sd_dat_s1_write,                                        //                                                 .write
		input  wire [31:0] sd_dat_s1_readdata,                                     //                                                 .readdata
		output wire [31:0] sd_dat_s1_writedata,                                    //                                                 .writedata
		output wire        sd_dat_s1_chipselect,                                   //                                                 .chipselect
		output wire [1:0]  sd_wp_n_s1_address,                                     //                                       sd_wp_n_s1.address
		input  wire [31:0] sd_wp_n_s1_readdata,                                    //                                                 .readdata
		output wire [1:0]  sw_s1_address,                                          //                                            sw_s1.address
		output wire        sw_s1_write,                                            //                                                 .write
		input  wire [31:0] sw_s1_readdata,                                         //                                                 .readdata
		output wire [31:0] sw_s1_writedata,                                        //                                                 .writedata
		output wire        sw_s1_chipselect,                                       //                                                 .chipselect
		output wire [2:0]  timer_s1_address,                                       //                                         timer_s1.address
		output wire        timer_s1_write,                                         //                                                 .write
		input  wire [15:0] timer_s1_readdata,                                      //                                                 .readdata
		output wire [15:0] timer_s1_writedata,                                     //                                                 .writedata
		output wire        timer_s1_chipselect,                                    //                                                 .chipselect
		output wire [1:0]  to_hw_port_s1_address,                                  //                                    to_hw_port_s1.address
		output wire        to_hw_port_s1_write,                                    //                                                 .write
		input  wire [31:0] to_hw_port_s1_readdata,                                 //                                                 .readdata
		output wire [31:0] to_hw_port_s1_writedata,                                //                                                 .writedata
		output wire        to_hw_port_s1_chipselect,                               //                                                 .chipselect
		output wire [1:0]  to_hw_sig_s1_address,                                   //                                     to_hw_sig_s1.address
		output wire        to_hw_sig_s1_write,                                     //                                                 .write
		input  wire [31:0] to_hw_sig_s1_readdata,                                  //                                                 .readdata
		output wire [31:0] to_hw_sig_s1_writedata,                                 //                                                 .writedata
		output wire        to_hw_sig_s1_chipselect,                                //                                                 .chipselect
		output wire [1:0]  to_sw_sig_s1_address,                                   //                                     to_sw_sig_s1.address
		input  wire [31:0] to_sw_sig_s1_readdata                                   //                                                 .readdata
	);

	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_waitrequest;   // clock_crossing_io_m0_agent:av_waitrequest -> clock_crossing_io_m0_translator:uav_waitrequest
	wire  [31:0] clock_crossing_io_m0_translator_avalon_universal_master_0_readdata;      // clock_crossing_io_m0_agent:av_readdata -> clock_crossing_io_m0_translator:uav_readdata
	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_debugaccess;   // clock_crossing_io_m0_translator:uav_debugaccess -> clock_crossing_io_m0_agent:av_debugaccess
	wire   [8:0] clock_crossing_io_m0_translator_avalon_universal_master_0_address;       // clock_crossing_io_m0_translator:uav_address -> clock_crossing_io_m0_agent:av_address
	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_read;          // clock_crossing_io_m0_translator:uav_read -> clock_crossing_io_m0_agent:av_read
	wire   [3:0] clock_crossing_io_m0_translator_avalon_universal_master_0_byteenable;    // clock_crossing_io_m0_translator:uav_byteenable -> clock_crossing_io_m0_agent:av_byteenable
	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_readdatavalid; // clock_crossing_io_m0_agent:av_readdatavalid -> clock_crossing_io_m0_translator:uav_readdatavalid
	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_lock;          // clock_crossing_io_m0_translator:uav_lock -> clock_crossing_io_m0_agent:av_lock
	wire         clock_crossing_io_m0_translator_avalon_universal_master_0_write;         // clock_crossing_io_m0_translator:uav_write -> clock_crossing_io_m0_agent:av_write
	wire  [31:0] clock_crossing_io_m0_translator_avalon_universal_master_0_writedata;     // clock_crossing_io_m0_translator:uav_writedata -> clock_crossing_io_m0_agent:av_writedata
	wire   [2:0] clock_crossing_io_m0_translator_avalon_universal_master_0_burstcount;    // clock_crossing_io_m0_translator:uav_burstcount -> clock_crossing_io_m0_agent:av_burstcount
	wire  [31:0] lcd_control_slave_agent_m0_readdata;                                     // lcd_control_slave_translator:uav_readdata -> lcd_control_slave_agent:m0_readdata
	wire         lcd_control_slave_agent_m0_waitrequest;                                  // lcd_control_slave_translator:uav_waitrequest -> lcd_control_slave_agent:m0_waitrequest
	wire         lcd_control_slave_agent_m0_debugaccess;                                  // lcd_control_slave_agent:m0_debugaccess -> lcd_control_slave_translator:uav_debugaccess
	wire   [8:0] lcd_control_slave_agent_m0_address;                                      // lcd_control_slave_agent:m0_address -> lcd_control_slave_translator:uav_address
	wire   [3:0] lcd_control_slave_agent_m0_byteenable;                                   // lcd_control_slave_agent:m0_byteenable -> lcd_control_slave_translator:uav_byteenable
	wire         lcd_control_slave_agent_m0_read;                                         // lcd_control_slave_agent:m0_read -> lcd_control_slave_translator:uav_read
	wire         lcd_control_slave_agent_m0_readdatavalid;                                // lcd_control_slave_translator:uav_readdatavalid -> lcd_control_slave_agent:m0_readdatavalid
	wire         lcd_control_slave_agent_m0_lock;                                         // lcd_control_slave_agent:m0_lock -> lcd_control_slave_translator:uav_lock
	wire  [31:0] lcd_control_slave_agent_m0_writedata;                                    // lcd_control_slave_agent:m0_writedata -> lcd_control_slave_translator:uav_writedata
	wire         lcd_control_slave_agent_m0_write;                                        // lcd_control_slave_agent:m0_write -> lcd_control_slave_translator:uav_write
	wire   [2:0] lcd_control_slave_agent_m0_burstcount;                                   // lcd_control_slave_agent:m0_burstcount -> lcd_control_slave_translator:uav_burstcount
	wire         lcd_control_slave_agent_rf_source_valid;                                 // lcd_control_slave_agent:rf_source_valid -> lcd_control_slave_agent_rsp_fifo:in_valid
	wire  [87:0] lcd_control_slave_agent_rf_source_data;                                  // lcd_control_slave_agent:rf_source_data -> lcd_control_slave_agent_rsp_fifo:in_data
	wire         lcd_control_slave_agent_rf_source_ready;                                 // lcd_control_slave_agent_rsp_fifo:in_ready -> lcd_control_slave_agent:rf_source_ready
	wire         lcd_control_slave_agent_rf_source_startofpacket;                         // lcd_control_slave_agent:rf_source_startofpacket -> lcd_control_slave_agent_rsp_fifo:in_startofpacket
	wire         lcd_control_slave_agent_rf_source_endofpacket;                           // lcd_control_slave_agent:rf_source_endofpacket -> lcd_control_slave_agent_rsp_fifo:in_endofpacket
	wire         lcd_control_slave_agent_rsp_fifo_out_valid;                              // lcd_control_slave_agent_rsp_fifo:out_valid -> lcd_control_slave_agent:rf_sink_valid
	wire  [87:0] lcd_control_slave_agent_rsp_fifo_out_data;                               // lcd_control_slave_agent_rsp_fifo:out_data -> lcd_control_slave_agent:rf_sink_data
	wire         lcd_control_slave_agent_rsp_fifo_out_ready;                              // lcd_control_slave_agent:rf_sink_ready -> lcd_control_slave_agent_rsp_fifo:out_ready
	wire         lcd_control_slave_agent_rsp_fifo_out_startofpacket;                      // lcd_control_slave_agent_rsp_fifo:out_startofpacket -> lcd_control_slave_agent:rf_sink_startofpacket
	wire         lcd_control_slave_agent_rsp_fifo_out_endofpacket;                        // lcd_control_slave_agent_rsp_fifo:out_endofpacket -> lcd_control_slave_agent:rf_sink_endofpacket
	wire         lcd_control_slave_agent_rdata_fifo_src_valid;                            // lcd_control_slave_agent:rdata_fifo_src_valid -> lcd_control_slave_agent_rdata_fifo:in_valid
	wire  [33:0] lcd_control_slave_agent_rdata_fifo_src_data;                             // lcd_control_slave_agent:rdata_fifo_src_data -> lcd_control_slave_agent_rdata_fifo:in_data
	wire         lcd_control_slave_agent_rdata_fifo_src_ready;                            // lcd_control_slave_agent_rdata_fifo:in_ready -> lcd_control_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> lcd_control_slave_agent:cp_valid
	wire  [86:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> lcd_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                       // lcd_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [18:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> lcd_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> lcd_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> lcd_control_slave_agent:cp_endofpacket
	wire  [31:0] key_s1_agent_m0_readdata;                                                // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire         key_s1_agent_m0_waitrequest;                                             // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire         key_s1_agent_m0_debugaccess;                                             // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [8:0] key_s1_agent_m0_address;                                                 // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire   [3:0] key_s1_agent_m0_byteenable;                                              // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire         key_s1_agent_m0_read;                                                    // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire         key_s1_agent_m0_readdatavalid;                                           // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire         key_s1_agent_m0_lock;                                                    // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire  [31:0] key_s1_agent_m0_writedata;                                               // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire         key_s1_agent_m0_write;                                                   // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire   [2:0] key_s1_agent_m0_burstcount;                                              // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire         key_s1_agent_rf_source_valid;                                            // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [87:0] key_s1_agent_rf_source_data;                                             // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire         key_s1_agent_rf_source_ready;                                            // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire         key_s1_agent_rf_source_startofpacket;                                    // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire         key_s1_agent_rf_source_endofpacket;                                      // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire         key_s1_agent_rsp_fifo_out_valid;                                         // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [87:0] key_s1_agent_rsp_fifo_out_data;                                          // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire         key_s1_agent_rsp_fifo_out_ready;                                         // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire         key_s1_agent_rsp_fifo_out_startofpacket;                                 // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire         key_s1_agent_rsp_fifo_out_endofpacket;                                   // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire         key_s1_agent_rdata_fifo_src_valid;                                       // key_s1_agent:rdata_fifo_src_valid -> key_s1_agent_rdata_fifo:in_valid
	wire  [33:0] key_s1_agent_rdata_fifo_src_data;                                        // key_s1_agent:rdata_fifo_src_data -> key_s1_agent_rdata_fifo:in_data
	wire         key_s1_agent_rdata_fifo_src_ready;                                       // key_s1_agent_rdata_fifo:in_ready -> key_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> key_s1_agent:cp_valid
	wire  [86:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> key_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                   // key_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [18:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> key_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> key_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> key_s1_agent:cp_endofpacket
	wire  [31:0] sd_clk_s1_agent_m0_readdata;                                             // sd_clk_s1_translator:uav_readdata -> sd_clk_s1_agent:m0_readdata
	wire         sd_clk_s1_agent_m0_waitrequest;                                          // sd_clk_s1_translator:uav_waitrequest -> sd_clk_s1_agent:m0_waitrequest
	wire         sd_clk_s1_agent_m0_debugaccess;                                          // sd_clk_s1_agent:m0_debugaccess -> sd_clk_s1_translator:uav_debugaccess
	wire   [8:0] sd_clk_s1_agent_m0_address;                                              // sd_clk_s1_agent:m0_address -> sd_clk_s1_translator:uav_address
	wire   [3:0] sd_clk_s1_agent_m0_byteenable;                                           // sd_clk_s1_agent:m0_byteenable -> sd_clk_s1_translator:uav_byteenable
	wire         sd_clk_s1_agent_m0_read;                                                 // sd_clk_s1_agent:m0_read -> sd_clk_s1_translator:uav_read
	wire         sd_clk_s1_agent_m0_readdatavalid;                                        // sd_clk_s1_translator:uav_readdatavalid -> sd_clk_s1_agent:m0_readdatavalid
	wire         sd_clk_s1_agent_m0_lock;                                                 // sd_clk_s1_agent:m0_lock -> sd_clk_s1_translator:uav_lock
	wire  [31:0] sd_clk_s1_agent_m0_writedata;                                            // sd_clk_s1_agent:m0_writedata -> sd_clk_s1_translator:uav_writedata
	wire         sd_clk_s1_agent_m0_write;                                                // sd_clk_s1_agent:m0_write -> sd_clk_s1_translator:uav_write
	wire   [2:0] sd_clk_s1_agent_m0_burstcount;                                           // sd_clk_s1_agent:m0_burstcount -> sd_clk_s1_translator:uav_burstcount
	wire         sd_clk_s1_agent_rf_source_valid;                                         // sd_clk_s1_agent:rf_source_valid -> sd_clk_s1_agent_rsp_fifo:in_valid
	wire  [87:0] sd_clk_s1_agent_rf_source_data;                                          // sd_clk_s1_agent:rf_source_data -> sd_clk_s1_agent_rsp_fifo:in_data
	wire         sd_clk_s1_agent_rf_source_ready;                                         // sd_clk_s1_agent_rsp_fifo:in_ready -> sd_clk_s1_agent:rf_source_ready
	wire         sd_clk_s1_agent_rf_source_startofpacket;                                 // sd_clk_s1_agent:rf_source_startofpacket -> sd_clk_s1_agent_rsp_fifo:in_startofpacket
	wire         sd_clk_s1_agent_rf_source_endofpacket;                                   // sd_clk_s1_agent:rf_source_endofpacket -> sd_clk_s1_agent_rsp_fifo:in_endofpacket
	wire         sd_clk_s1_agent_rsp_fifo_out_valid;                                      // sd_clk_s1_agent_rsp_fifo:out_valid -> sd_clk_s1_agent:rf_sink_valid
	wire  [87:0] sd_clk_s1_agent_rsp_fifo_out_data;                                       // sd_clk_s1_agent_rsp_fifo:out_data -> sd_clk_s1_agent:rf_sink_data
	wire         sd_clk_s1_agent_rsp_fifo_out_ready;                                      // sd_clk_s1_agent:rf_sink_ready -> sd_clk_s1_agent_rsp_fifo:out_ready
	wire         sd_clk_s1_agent_rsp_fifo_out_startofpacket;                              // sd_clk_s1_agent_rsp_fifo:out_startofpacket -> sd_clk_s1_agent:rf_sink_startofpacket
	wire         sd_clk_s1_agent_rsp_fifo_out_endofpacket;                                // sd_clk_s1_agent_rsp_fifo:out_endofpacket -> sd_clk_s1_agent:rf_sink_endofpacket
	wire         sd_clk_s1_agent_rdata_fifo_src_valid;                                    // sd_clk_s1_agent:rdata_fifo_src_valid -> sd_clk_s1_agent_rdata_fifo:in_valid
	wire  [33:0] sd_clk_s1_agent_rdata_fifo_src_data;                                     // sd_clk_s1_agent:rdata_fifo_src_data -> sd_clk_s1_agent_rdata_fifo:in_data
	wire         sd_clk_s1_agent_rdata_fifo_src_ready;                                    // sd_clk_s1_agent_rdata_fifo:in_ready -> sd_clk_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_valid;                                                   // cmd_mux_002:src_valid -> sd_clk_s1_agent:cp_valid
	wire  [86:0] cmd_mux_002_src_data;                                                    // cmd_mux_002:src_data -> sd_clk_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                   // sd_clk_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [18:0] cmd_mux_002_src_channel;                                                 // cmd_mux_002:src_channel -> sd_clk_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                           // cmd_mux_002:src_startofpacket -> sd_clk_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                             // cmd_mux_002:src_endofpacket -> sd_clk_s1_agent:cp_endofpacket
	wire  [31:0] sd_cmd_s1_agent_m0_readdata;                                             // sd_cmd_s1_translator:uav_readdata -> sd_cmd_s1_agent:m0_readdata
	wire         sd_cmd_s1_agent_m0_waitrequest;                                          // sd_cmd_s1_translator:uav_waitrequest -> sd_cmd_s1_agent:m0_waitrequest
	wire         sd_cmd_s1_agent_m0_debugaccess;                                          // sd_cmd_s1_agent:m0_debugaccess -> sd_cmd_s1_translator:uav_debugaccess
	wire   [8:0] sd_cmd_s1_agent_m0_address;                                              // sd_cmd_s1_agent:m0_address -> sd_cmd_s1_translator:uav_address
	wire   [3:0] sd_cmd_s1_agent_m0_byteenable;                                           // sd_cmd_s1_agent:m0_byteenable -> sd_cmd_s1_translator:uav_byteenable
	wire         sd_cmd_s1_agent_m0_read;                                                 // sd_cmd_s1_agent:m0_read -> sd_cmd_s1_translator:uav_read
	wire         sd_cmd_s1_agent_m0_readdatavalid;                                        // sd_cmd_s1_translator:uav_readdatavalid -> sd_cmd_s1_agent:m0_readdatavalid
	wire         sd_cmd_s1_agent_m0_lock;                                                 // sd_cmd_s1_agent:m0_lock -> sd_cmd_s1_translator:uav_lock
	wire  [31:0] sd_cmd_s1_agent_m0_writedata;                                            // sd_cmd_s1_agent:m0_writedata -> sd_cmd_s1_translator:uav_writedata
	wire         sd_cmd_s1_agent_m0_write;                                                // sd_cmd_s1_agent:m0_write -> sd_cmd_s1_translator:uav_write
	wire   [2:0] sd_cmd_s1_agent_m0_burstcount;                                           // sd_cmd_s1_agent:m0_burstcount -> sd_cmd_s1_translator:uav_burstcount
	wire         sd_cmd_s1_agent_rf_source_valid;                                         // sd_cmd_s1_agent:rf_source_valid -> sd_cmd_s1_agent_rsp_fifo:in_valid
	wire  [87:0] sd_cmd_s1_agent_rf_source_data;                                          // sd_cmd_s1_agent:rf_source_data -> sd_cmd_s1_agent_rsp_fifo:in_data
	wire         sd_cmd_s1_agent_rf_source_ready;                                         // sd_cmd_s1_agent_rsp_fifo:in_ready -> sd_cmd_s1_agent:rf_source_ready
	wire         sd_cmd_s1_agent_rf_source_startofpacket;                                 // sd_cmd_s1_agent:rf_source_startofpacket -> sd_cmd_s1_agent_rsp_fifo:in_startofpacket
	wire         sd_cmd_s1_agent_rf_source_endofpacket;                                   // sd_cmd_s1_agent:rf_source_endofpacket -> sd_cmd_s1_agent_rsp_fifo:in_endofpacket
	wire         sd_cmd_s1_agent_rsp_fifo_out_valid;                                      // sd_cmd_s1_agent_rsp_fifo:out_valid -> sd_cmd_s1_agent:rf_sink_valid
	wire  [87:0] sd_cmd_s1_agent_rsp_fifo_out_data;                                       // sd_cmd_s1_agent_rsp_fifo:out_data -> sd_cmd_s1_agent:rf_sink_data
	wire         sd_cmd_s1_agent_rsp_fifo_out_ready;                                      // sd_cmd_s1_agent:rf_sink_ready -> sd_cmd_s1_agent_rsp_fifo:out_ready
	wire         sd_cmd_s1_agent_rsp_fifo_out_startofpacket;                              // sd_cmd_s1_agent_rsp_fifo:out_startofpacket -> sd_cmd_s1_agent:rf_sink_startofpacket
	wire         sd_cmd_s1_agent_rsp_fifo_out_endofpacket;                                // sd_cmd_s1_agent_rsp_fifo:out_endofpacket -> sd_cmd_s1_agent:rf_sink_endofpacket
	wire         sd_cmd_s1_agent_rdata_fifo_src_valid;                                    // sd_cmd_s1_agent:rdata_fifo_src_valid -> sd_cmd_s1_agent_rdata_fifo:in_valid
	wire  [33:0] sd_cmd_s1_agent_rdata_fifo_src_data;                                     // sd_cmd_s1_agent:rdata_fifo_src_data -> sd_cmd_s1_agent_rdata_fifo:in_data
	wire         sd_cmd_s1_agent_rdata_fifo_src_ready;                                    // sd_cmd_s1_agent_rdata_fifo:in_ready -> sd_cmd_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_valid;                                                   // cmd_mux_003:src_valid -> sd_cmd_s1_agent:cp_valid
	wire  [86:0] cmd_mux_003_src_data;                                                    // cmd_mux_003:src_data -> sd_cmd_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                   // sd_cmd_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [18:0] cmd_mux_003_src_channel;                                                 // cmd_mux_003:src_channel -> sd_cmd_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                           // cmd_mux_003:src_startofpacket -> sd_cmd_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                             // cmd_mux_003:src_endofpacket -> sd_cmd_s1_agent:cp_endofpacket
	wire  [31:0] sd_dat_s1_agent_m0_readdata;                                             // sd_dat_s1_translator:uav_readdata -> sd_dat_s1_agent:m0_readdata
	wire         sd_dat_s1_agent_m0_waitrequest;                                          // sd_dat_s1_translator:uav_waitrequest -> sd_dat_s1_agent:m0_waitrequest
	wire         sd_dat_s1_agent_m0_debugaccess;                                          // sd_dat_s1_agent:m0_debugaccess -> sd_dat_s1_translator:uav_debugaccess
	wire   [8:0] sd_dat_s1_agent_m0_address;                                              // sd_dat_s1_agent:m0_address -> sd_dat_s1_translator:uav_address
	wire   [3:0] sd_dat_s1_agent_m0_byteenable;                                           // sd_dat_s1_agent:m0_byteenable -> sd_dat_s1_translator:uav_byteenable
	wire         sd_dat_s1_agent_m0_read;                                                 // sd_dat_s1_agent:m0_read -> sd_dat_s1_translator:uav_read
	wire         sd_dat_s1_agent_m0_readdatavalid;                                        // sd_dat_s1_translator:uav_readdatavalid -> sd_dat_s1_agent:m0_readdatavalid
	wire         sd_dat_s1_agent_m0_lock;                                                 // sd_dat_s1_agent:m0_lock -> sd_dat_s1_translator:uav_lock
	wire  [31:0] sd_dat_s1_agent_m0_writedata;                                            // sd_dat_s1_agent:m0_writedata -> sd_dat_s1_translator:uav_writedata
	wire         sd_dat_s1_agent_m0_write;                                                // sd_dat_s1_agent:m0_write -> sd_dat_s1_translator:uav_write
	wire   [2:0] sd_dat_s1_agent_m0_burstcount;                                           // sd_dat_s1_agent:m0_burstcount -> sd_dat_s1_translator:uav_burstcount
	wire         sd_dat_s1_agent_rf_source_valid;                                         // sd_dat_s1_agent:rf_source_valid -> sd_dat_s1_agent_rsp_fifo:in_valid
	wire  [87:0] sd_dat_s1_agent_rf_source_data;                                          // sd_dat_s1_agent:rf_source_data -> sd_dat_s1_agent_rsp_fifo:in_data
	wire         sd_dat_s1_agent_rf_source_ready;                                         // sd_dat_s1_agent_rsp_fifo:in_ready -> sd_dat_s1_agent:rf_source_ready
	wire         sd_dat_s1_agent_rf_source_startofpacket;                                 // sd_dat_s1_agent:rf_source_startofpacket -> sd_dat_s1_agent_rsp_fifo:in_startofpacket
	wire         sd_dat_s1_agent_rf_source_endofpacket;                                   // sd_dat_s1_agent:rf_source_endofpacket -> sd_dat_s1_agent_rsp_fifo:in_endofpacket
	wire         sd_dat_s1_agent_rsp_fifo_out_valid;                                      // sd_dat_s1_agent_rsp_fifo:out_valid -> sd_dat_s1_agent:rf_sink_valid
	wire  [87:0] sd_dat_s1_agent_rsp_fifo_out_data;                                       // sd_dat_s1_agent_rsp_fifo:out_data -> sd_dat_s1_agent:rf_sink_data
	wire         sd_dat_s1_agent_rsp_fifo_out_ready;                                      // sd_dat_s1_agent:rf_sink_ready -> sd_dat_s1_agent_rsp_fifo:out_ready
	wire         sd_dat_s1_agent_rsp_fifo_out_startofpacket;                              // sd_dat_s1_agent_rsp_fifo:out_startofpacket -> sd_dat_s1_agent:rf_sink_startofpacket
	wire         sd_dat_s1_agent_rsp_fifo_out_endofpacket;                                // sd_dat_s1_agent_rsp_fifo:out_endofpacket -> sd_dat_s1_agent:rf_sink_endofpacket
	wire         sd_dat_s1_agent_rdata_fifo_src_valid;                                    // sd_dat_s1_agent:rdata_fifo_src_valid -> sd_dat_s1_agent_rdata_fifo:in_valid
	wire  [33:0] sd_dat_s1_agent_rdata_fifo_src_data;                                     // sd_dat_s1_agent:rdata_fifo_src_data -> sd_dat_s1_agent_rdata_fifo:in_data
	wire         sd_dat_s1_agent_rdata_fifo_src_ready;                                    // sd_dat_s1_agent_rdata_fifo:in_ready -> sd_dat_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_valid;                                                   // cmd_mux_004:src_valid -> sd_dat_s1_agent:cp_valid
	wire  [86:0] cmd_mux_004_src_data;                                                    // cmd_mux_004:src_data -> sd_dat_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                   // sd_dat_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [18:0] cmd_mux_004_src_channel;                                                 // cmd_mux_004:src_channel -> sd_dat_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                           // cmd_mux_004:src_startofpacket -> sd_dat_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                             // cmd_mux_004:src_endofpacket -> sd_dat_s1_agent:cp_endofpacket
	wire  [31:0] sd_wp_n_s1_agent_m0_readdata;                                            // sd_wp_n_s1_translator:uav_readdata -> sd_wp_n_s1_agent:m0_readdata
	wire         sd_wp_n_s1_agent_m0_waitrequest;                                         // sd_wp_n_s1_translator:uav_waitrequest -> sd_wp_n_s1_agent:m0_waitrequest
	wire         sd_wp_n_s1_agent_m0_debugaccess;                                         // sd_wp_n_s1_agent:m0_debugaccess -> sd_wp_n_s1_translator:uav_debugaccess
	wire   [8:0] sd_wp_n_s1_agent_m0_address;                                             // sd_wp_n_s1_agent:m0_address -> sd_wp_n_s1_translator:uav_address
	wire   [3:0] sd_wp_n_s1_agent_m0_byteenable;                                          // sd_wp_n_s1_agent:m0_byteenable -> sd_wp_n_s1_translator:uav_byteenable
	wire         sd_wp_n_s1_agent_m0_read;                                                // sd_wp_n_s1_agent:m0_read -> sd_wp_n_s1_translator:uav_read
	wire         sd_wp_n_s1_agent_m0_readdatavalid;                                       // sd_wp_n_s1_translator:uav_readdatavalid -> sd_wp_n_s1_agent:m0_readdatavalid
	wire         sd_wp_n_s1_agent_m0_lock;                                                // sd_wp_n_s1_agent:m0_lock -> sd_wp_n_s1_translator:uav_lock
	wire  [31:0] sd_wp_n_s1_agent_m0_writedata;                                           // sd_wp_n_s1_agent:m0_writedata -> sd_wp_n_s1_translator:uav_writedata
	wire         sd_wp_n_s1_agent_m0_write;                                               // sd_wp_n_s1_agent:m0_write -> sd_wp_n_s1_translator:uav_write
	wire   [2:0] sd_wp_n_s1_agent_m0_burstcount;                                          // sd_wp_n_s1_agent:m0_burstcount -> sd_wp_n_s1_translator:uav_burstcount
	wire         sd_wp_n_s1_agent_rf_source_valid;                                        // sd_wp_n_s1_agent:rf_source_valid -> sd_wp_n_s1_agent_rsp_fifo:in_valid
	wire  [87:0] sd_wp_n_s1_agent_rf_source_data;                                         // sd_wp_n_s1_agent:rf_source_data -> sd_wp_n_s1_agent_rsp_fifo:in_data
	wire         sd_wp_n_s1_agent_rf_source_ready;                                        // sd_wp_n_s1_agent_rsp_fifo:in_ready -> sd_wp_n_s1_agent:rf_source_ready
	wire         sd_wp_n_s1_agent_rf_source_startofpacket;                                // sd_wp_n_s1_agent:rf_source_startofpacket -> sd_wp_n_s1_agent_rsp_fifo:in_startofpacket
	wire         sd_wp_n_s1_agent_rf_source_endofpacket;                                  // sd_wp_n_s1_agent:rf_source_endofpacket -> sd_wp_n_s1_agent_rsp_fifo:in_endofpacket
	wire         sd_wp_n_s1_agent_rsp_fifo_out_valid;                                     // sd_wp_n_s1_agent_rsp_fifo:out_valid -> sd_wp_n_s1_agent:rf_sink_valid
	wire  [87:0] sd_wp_n_s1_agent_rsp_fifo_out_data;                                      // sd_wp_n_s1_agent_rsp_fifo:out_data -> sd_wp_n_s1_agent:rf_sink_data
	wire         sd_wp_n_s1_agent_rsp_fifo_out_ready;                                     // sd_wp_n_s1_agent:rf_sink_ready -> sd_wp_n_s1_agent_rsp_fifo:out_ready
	wire         sd_wp_n_s1_agent_rsp_fifo_out_startofpacket;                             // sd_wp_n_s1_agent_rsp_fifo:out_startofpacket -> sd_wp_n_s1_agent:rf_sink_startofpacket
	wire         sd_wp_n_s1_agent_rsp_fifo_out_endofpacket;                               // sd_wp_n_s1_agent_rsp_fifo:out_endofpacket -> sd_wp_n_s1_agent:rf_sink_endofpacket
	wire         sd_wp_n_s1_agent_rdata_fifo_src_valid;                                   // sd_wp_n_s1_agent:rdata_fifo_src_valid -> sd_wp_n_s1_agent_rdata_fifo:in_valid
	wire  [33:0] sd_wp_n_s1_agent_rdata_fifo_src_data;                                    // sd_wp_n_s1_agent:rdata_fifo_src_data -> sd_wp_n_s1_agent_rdata_fifo:in_data
	wire         sd_wp_n_s1_agent_rdata_fifo_src_ready;                                   // sd_wp_n_s1_agent_rdata_fifo:in_ready -> sd_wp_n_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_valid;                                                   // cmd_mux_005:src_valid -> sd_wp_n_s1_agent:cp_valid
	wire  [86:0] cmd_mux_005_src_data;                                                    // cmd_mux_005:src_data -> sd_wp_n_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                   // sd_wp_n_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [18:0] cmd_mux_005_src_channel;                                                 // cmd_mux_005:src_channel -> sd_wp_n_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                           // cmd_mux_005:src_startofpacket -> sd_wp_n_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                             // cmd_mux_005:src_endofpacket -> sd_wp_n_s1_agent:cp_endofpacket
	wire  [31:0] epp_i2c_scl_s1_agent_m0_readdata;                                        // epp_i2c_scl_s1_translator:uav_readdata -> epp_i2c_scl_s1_agent:m0_readdata
	wire         epp_i2c_scl_s1_agent_m0_waitrequest;                                     // epp_i2c_scl_s1_translator:uav_waitrequest -> epp_i2c_scl_s1_agent:m0_waitrequest
	wire         epp_i2c_scl_s1_agent_m0_debugaccess;                                     // epp_i2c_scl_s1_agent:m0_debugaccess -> epp_i2c_scl_s1_translator:uav_debugaccess
	wire   [8:0] epp_i2c_scl_s1_agent_m0_address;                                         // epp_i2c_scl_s1_agent:m0_address -> epp_i2c_scl_s1_translator:uav_address
	wire   [3:0] epp_i2c_scl_s1_agent_m0_byteenable;                                      // epp_i2c_scl_s1_agent:m0_byteenable -> epp_i2c_scl_s1_translator:uav_byteenable
	wire         epp_i2c_scl_s1_agent_m0_read;                                            // epp_i2c_scl_s1_agent:m0_read -> epp_i2c_scl_s1_translator:uav_read
	wire         epp_i2c_scl_s1_agent_m0_readdatavalid;                                   // epp_i2c_scl_s1_translator:uav_readdatavalid -> epp_i2c_scl_s1_agent:m0_readdatavalid
	wire         epp_i2c_scl_s1_agent_m0_lock;                                            // epp_i2c_scl_s1_agent:m0_lock -> epp_i2c_scl_s1_translator:uav_lock
	wire  [31:0] epp_i2c_scl_s1_agent_m0_writedata;                                       // epp_i2c_scl_s1_agent:m0_writedata -> epp_i2c_scl_s1_translator:uav_writedata
	wire         epp_i2c_scl_s1_agent_m0_write;                                           // epp_i2c_scl_s1_agent:m0_write -> epp_i2c_scl_s1_translator:uav_write
	wire   [2:0] epp_i2c_scl_s1_agent_m0_burstcount;                                      // epp_i2c_scl_s1_agent:m0_burstcount -> epp_i2c_scl_s1_translator:uav_burstcount
	wire         epp_i2c_scl_s1_agent_rf_source_valid;                                    // epp_i2c_scl_s1_agent:rf_source_valid -> epp_i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [87:0] epp_i2c_scl_s1_agent_rf_source_data;                                     // epp_i2c_scl_s1_agent:rf_source_data -> epp_i2c_scl_s1_agent_rsp_fifo:in_data
	wire         epp_i2c_scl_s1_agent_rf_source_ready;                                    // epp_i2c_scl_s1_agent_rsp_fifo:in_ready -> epp_i2c_scl_s1_agent:rf_source_ready
	wire         epp_i2c_scl_s1_agent_rf_source_startofpacket;                            // epp_i2c_scl_s1_agent:rf_source_startofpacket -> epp_i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire         epp_i2c_scl_s1_agent_rf_source_endofpacket;                              // epp_i2c_scl_s1_agent:rf_source_endofpacket -> epp_i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire         epp_i2c_scl_s1_agent_rsp_fifo_out_valid;                                 // epp_i2c_scl_s1_agent_rsp_fifo:out_valid -> epp_i2c_scl_s1_agent:rf_sink_valid
	wire  [87:0] epp_i2c_scl_s1_agent_rsp_fifo_out_data;                                  // epp_i2c_scl_s1_agent_rsp_fifo:out_data -> epp_i2c_scl_s1_agent:rf_sink_data
	wire         epp_i2c_scl_s1_agent_rsp_fifo_out_ready;                                 // epp_i2c_scl_s1_agent:rf_sink_ready -> epp_i2c_scl_s1_agent_rsp_fifo:out_ready
	wire         epp_i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                         // epp_i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> epp_i2c_scl_s1_agent:rf_sink_startofpacket
	wire         epp_i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                           // epp_i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> epp_i2c_scl_s1_agent:rf_sink_endofpacket
	wire         epp_i2c_scl_s1_agent_rdata_fifo_src_valid;                               // epp_i2c_scl_s1_agent:rdata_fifo_src_valid -> epp_i2c_scl_s1_agent_rdata_fifo:in_valid
	wire  [33:0] epp_i2c_scl_s1_agent_rdata_fifo_src_data;                                // epp_i2c_scl_s1_agent:rdata_fifo_src_data -> epp_i2c_scl_s1_agent_rdata_fifo:in_data
	wire         epp_i2c_scl_s1_agent_rdata_fifo_src_ready;                               // epp_i2c_scl_s1_agent_rdata_fifo:in_ready -> epp_i2c_scl_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_valid;                                                   // cmd_mux_006:src_valid -> epp_i2c_scl_s1_agent:cp_valid
	wire  [86:0] cmd_mux_006_src_data;                                                    // cmd_mux_006:src_data -> epp_i2c_scl_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                   // epp_i2c_scl_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [18:0] cmd_mux_006_src_channel;                                                 // cmd_mux_006:src_channel -> epp_i2c_scl_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                           // cmd_mux_006:src_startofpacket -> epp_i2c_scl_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                             // cmd_mux_006:src_endofpacket -> epp_i2c_scl_s1_agent:cp_endofpacket
	wire  [31:0] epp_i2c_sda_s1_agent_m0_readdata;                                        // epp_i2c_sda_s1_translator:uav_readdata -> epp_i2c_sda_s1_agent:m0_readdata
	wire         epp_i2c_sda_s1_agent_m0_waitrequest;                                     // epp_i2c_sda_s1_translator:uav_waitrequest -> epp_i2c_sda_s1_agent:m0_waitrequest
	wire         epp_i2c_sda_s1_agent_m0_debugaccess;                                     // epp_i2c_sda_s1_agent:m0_debugaccess -> epp_i2c_sda_s1_translator:uav_debugaccess
	wire   [8:0] epp_i2c_sda_s1_agent_m0_address;                                         // epp_i2c_sda_s1_agent:m0_address -> epp_i2c_sda_s1_translator:uav_address
	wire   [3:0] epp_i2c_sda_s1_agent_m0_byteenable;                                      // epp_i2c_sda_s1_agent:m0_byteenable -> epp_i2c_sda_s1_translator:uav_byteenable
	wire         epp_i2c_sda_s1_agent_m0_read;                                            // epp_i2c_sda_s1_agent:m0_read -> epp_i2c_sda_s1_translator:uav_read
	wire         epp_i2c_sda_s1_agent_m0_readdatavalid;                                   // epp_i2c_sda_s1_translator:uav_readdatavalid -> epp_i2c_sda_s1_agent:m0_readdatavalid
	wire         epp_i2c_sda_s1_agent_m0_lock;                                            // epp_i2c_sda_s1_agent:m0_lock -> epp_i2c_sda_s1_translator:uav_lock
	wire  [31:0] epp_i2c_sda_s1_agent_m0_writedata;                                       // epp_i2c_sda_s1_agent:m0_writedata -> epp_i2c_sda_s1_translator:uav_writedata
	wire         epp_i2c_sda_s1_agent_m0_write;                                           // epp_i2c_sda_s1_agent:m0_write -> epp_i2c_sda_s1_translator:uav_write
	wire   [2:0] epp_i2c_sda_s1_agent_m0_burstcount;                                      // epp_i2c_sda_s1_agent:m0_burstcount -> epp_i2c_sda_s1_translator:uav_burstcount
	wire         epp_i2c_sda_s1_agent_rf_source_valid;                                    // epp_i2c_sda_s1_agent:rf_source_valid -> epp_i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [87:0] epp_i2c_sda_s1_agent_rf_source_data;                                     // epp_i2c_sda_s1_agent:rf_source_data -> epp_i2c_sda_s1_agent_rsp_fifo:in_data
	wire         epp_i2c_sda_s1_agent_rf_source_ready;                                    // epp_i2c_sda_s1_agent_rsp_fifo:in_ready -> epp_i2c_sda_s1_agent:rf_source_ready
	wire         epp_i2c_sda_s1_agent_rf_source_startofpacket;                            // epp_i2c_sda_s1_agent:rf_source_startofpacket -> epp_i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire         epp_i2c_sda_s1_agent_rf_source_endofpacket;                              // epp_i2c_sda_s1_agent:rf_source_endofpacket -> epp_i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire         epp_i2c_sda_s1_agent_rsp_fifo_out_valid;                                 // epp_i2c_sda_s1_agent_rsp_fifo:out_valid -> epp_i2c_sda_s1_agent:rf_sink_valid
	wire  [87:0] epp_i2c_sda_s1_agent_rsp_fifo_out_data;                                  // epp_i2c_sda_s1_agent_rsp_fifo:out_data -> epp_i2c_sda_s1_agent:rf_sink_data
	wire         epp_i2c_sda_s1_agent_rsp_fifo_out_ready;                                 // epp_i2c_sda_s1_agent:rf_sink_ready -> epp_i2c_sda_s1_agent_rsp_fifo:out_ready
	wire         epp_i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                         // epp_i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> epp_i2c_sda_s1_agent:rf_sink_startofpacket
	wire         epp_i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                           // epp_i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> epp_i2c_sda_s1_agent:rf_sink_endofpacket
	wire         epp_i2c_sda_s1_agent_rdata_fifo_src_valid;                               // epp_i2c_sda_s1_agent:rdata_fifo_src_valid -> epp_i2c_sda_s1_agent_rdata_fifo:in_valid
	wire  [33:0] epp_i2c_sda_s1_agent_rdata_fifo_src_data;                                // epp_i2c_sda_s1_agent:rdata_fifo_src_data -> epp_i2c_sda_s1_agent_rdata_fifo:in_data
	wire         epp_i2c_sda_s1_agent_rdata_fifo_src_ready;                               // epp_i2c_sda_s1_agent_rdata_fifo:in_ready -> epp_i2c_sda_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_valid;                                                   // cmd_mux_007:src_valid -> epp_i2c_sda_s1_agent:cp_valid
	wire  [86:0] cmd_mux_007_src_data;                                                    // cmd_mux_007:src_data -> epp_i2c_sda_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                   // epp_i2c_sda_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [18:0] cmd_mux_007_src_channel;                                                 // cmd_mux_007:src_channel -> epp_i2c_sda_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                           // cmd_mux_007:src_startofpacket -> epp_i2c_sda_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                             // cmd_mux_007:src_endofpacket -> epp_i2c_sda_s1_agent:cp_endofpacket
	wire  [31:0] sw_s1_agent_m0_readdata;                                                 // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire         sw_s1_agent_m0_waitrequest;                                              // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire         sw_s1_agent_m0_debugaccess;                                              // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [8:0] sw_s1_agent_m0_address;                                                  // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire   [3:0] sw_s1_agent_m0_byteenable;                                               // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire         sw_s1_agent_m0_read;                                                     // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire         sw_s1_agent_m0_readdatavalid;                                            // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire         sw_s1_agent_m0_lock;                                                     // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire  [31:0] sw_s1_agent_m0_writedata;                                                // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire         sw_s1_agent_m0_write;                                                    // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire   [2:0] sw_s1_agent_m0_burstcount;                                               // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire         sw_s1_agent_rf_source_valid;                                             // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [87:0] sw_s1_agent_rf_source_data;                                              // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire         sw_s1_agent_rf_source_ready;                                             // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire         sw_s1_agent_rf_source_startofpacket;                                     // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire         sw_s1_agent_rf_source_endofpacket;                                       // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire         sw_s1_agent_rsp_fifo_out_valid;                                          // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [87:0] sw_s1_agent_rsp_fifo_out_data;                                           // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire         sw_s1_agent_rsp_fifo_out_ready;                                          // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire         sw_s1_agent_rsp_fifo_out_startofpacket;                                  // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire         sw_s1_agent_rsp_fifo_out_endofpacket;                                    // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire         sw_s1_agent_rdata_fifo_src_valid;                                        // sw_s1_agent:rdata_fifo_src_valid -> sw_s1_agent_rdata_fifo:in_valid
	wire  [33:0] sw_s1_agent_rdata_fifo_src_data;                                         // sw_s1_agent:rdata_fifo_src_data -> sw_s1_agent_rdata_fifo:in_data
	wire         sw_s1_agent_rdata_fifo_src_ready;                                        // sw_s1_agent_rdata_fifo:in_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_valid;                                                   // cmd_mux_008:src_valid -> sw_s1_agent:cp_valid
	wire  [86:0] cmd_mux_008_src_data;                                                    // cmd_mux_008:src_data -> sw_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                   // sw_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [18:0] cmd_mux_008_src_channel;                                                 // cmd_mux_008:src_channel -> sw_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                           // cmd_mux_008:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                             // cmd_mux_008:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire  [31:0] i2c_scl_s1_agent_m0_readdata;                                            // i2c_scl_s1_translator:uav_readdata -> i2c_scl_s1_agent:m0_readdata
	wire         i2c_scl_s1_agent_m0_waitrequest;                                         // i2c_scl_s1_translator:uav_waitrequest -> i2c_scl_s1_agent:m0_waitrequest
	wire         i2c_scl_s1_agent_m0_debugaccess;                                         // i2c_scl_s1_agent:m0_debugaccess -> i2c_scl_s1_translator:uav_debugaccess
	wire   [8:0] i2c_scl_s1_agent_m0_address;                                             // i2c_scl_s1_agent:m0_address -> i2c_scl_s1_translator:uav_address
	wire   [3:0] i2c_scl_s1_agent_m0_byteenable;                                          // i2c_scl_s1_agent:m0_byteenable -> i2c_scl_s1_translator:uav_byteenable
	wire         i2c_scl_s1_agent_m0_read;                                                // i2c_scl_s1_agent:m0_read -> i2c_scl_s1_translator:uav_read
	wire         i2c_scl_s1_agent_m0_readdatavalid;                                       // i2c_scl_s1_translator:uav_readdatavalid -> i2c_scl_s1_agent:m0_readdatavalid
	wire         i2c_scl_s1_agent_m0_lock;                                                // i2c_scl_s1_agent:m0_lock -> i2c_scl_s1_translator:uav_lock
	wire  [31:0] i2c_scl_s1_agent_m0_writedata;                                           // i2c_scl_s1_agent:m0_writedata -> i2c_scl_s1_translator:uav_writedata
	wire         i2c_scl_s1_agent_m0_write;                                               // i2c_scl_s1_agent:m0_write -> i2c_scl_s1_translator:uav_write
	wire   [2:0] i2c_scl_s1_agent_m0_burstcount;                                          // i2c_scl_s1_agent:m0_burstcount -> i2c_scl_s1_translator:uav_burstcount
	wire         i2c_scl_s1_agent_rf_source_valid;                                        // i2c_scl_s1_agent:rf_source_valid -> i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [87:0] i2c_scl_s1_agent_rf_source_data;                                         // i2c_scl_s1_agent:rf_source_data -> i2c_scl_s1_agent_rsp_fifo:in_data
	wire         i2c_scl_s1_agent_rf_source_ready;                                        // i2c_scl_s1_agent_rsp_fifo:in_ready -> i2c_scl_s1_agent:rf_source_ready
	wire         i2c_scl_s1_agent_rf_source_startofpacket;                                // i2c_scl_s1_agent:rf_source_startofpacket -> i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_scl_s1_agent_rf_source_endofpacket;                                  // i2c_scl_s1_agent:rf_source_endofpacket -> i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_valid;                                     // i2c_scl_s1_agent_rsp_fifo:out_valid -> i2c_scl_s1_agent:rf_sink_valid
	wire  [87:0] i2c_scl_s1_agent_rsp_fifo_out_data;                                      // i2c_scl_s1_agent_rsp_fifo:out_data -> i2c_scl_s1_agent:rf_sink_data
	wire         i2c_scl_s1_agent_rsp_fifo_out_ready;                                     // i2c_scl_s1_agent:rf_sink_ready -> i2c_scl_s1_agent_rsp_fifo:out_ready
	wire         i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                             // i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> i2c_scl_s1_agent:rf_sink_startofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                               // i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> i2c_scl_s1_agent:rf_sink_endofpacket
	wire         i2c_scl_s1_agent_rdata_fifo_src_valid;                                   // i2c_scl_s1_agent:rdata_fifo_src_valid -> i2c_scl_s1_agent_rdata_fifo:in_valid
	wire  [33:0] i2c_scl_s1_agent_rdata_fifo_src_data;                                    // i2c_scl_s1_agent:rdata_fifo_src_data -> i2c_scl_s1_agent_rdata_fifo:in_data
	wire         i2c_scl_s1_agent_rdata_fifo_src_ready;                                   // i2c_scl_s1_agent_rdata_fifo:in_ready -> i2c_scl_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_valid;                                                   // cmd_mux_009:src_valid -> i2c_scl_s1_agent:cp_valid
	wire  [86:0] cmd_mux_009_src_data;                                                    // cmd_mux_009:src_data -> i2c_scl_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                   // i2c_scl_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [18:0] cmd_mux_009_src_channel;                                                 // cmd_mux_009:src_channel -> i2c_scl_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                           // cmd_mux_009:src_startofpacket -> i2c_scl_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                             // cmd_mux_009:src_endofpacket -> i2c_scl_s1_agent:cp_endofpacket
	wire  [31:0] i2c_sda_s1_agent_m0_readdata;                                            // i2c_sda_s1_translator:uav_readdata -> i2c_sda_s1_agent:m0_readdata
	wire         i2c_sda_s1_agent_m0_waitrequest;                                         // i2c_sda_s1_translator:uav_waitrequest -> i2c_sda_s1_agent:m0_waitrequest
	wire         i2c_sda_s1_agent_m0_debugaccess;                                         // i2c_sda_s1_agent:m0_debugaccess -> i2c_sda_s1_translator:uav_debugaccess
	wire   [8:0] i2c_sda_s1_agent_m0_address;                                             // i2c_sda_s1_agent:m0_address -> i2c_sda_s1_translator:uav_address
	wire   [3:0] i2c_sda_s1_agent_m0_byteenable;                                          // i2c_sda_s1_agent:m0_byteenable -> i2c_sda_s1_translator:uav_byteenable
	wire         i2c_sda_s1_agent_m0_read;                                                // i2c_sda_s1_agent:m0_read -> i2c_sda_s1_translator:uav_read
	wire         i2c_sda_s1_agent_m0_readdatavalid;                                       // i2c_sda_s1_translator:uav_readdatavalid -> i2c_sda_s1_agent:m0_readdatavalid
	wire         i2c_sda_s1_agent_m0_lock;                                                // i2c_sda_s1_agent:m0_lock -> i2c_sda_s1_translator:uav_lock
	wire  [31:0] i2c_sda_s1_agent_m0_writedata;                                           // i2c_sda_s1_agent:m0_writedata -> i2c_sda_s1_translator:uav_writedata
	wire         i2c_sda_s1_agent_m0_write;                                               // i2c_sda_s1_agent:m0_write -> i2c_sda_s1_translator:uav_write
	wire   [2:0] i2c_sda_s1_agent_m0_burstcount;                                          // i2c_sda_s1_agent:m0_burstcount -> i2c_sda_s1_translator:uav_burstcount
	wire         i2c_sda_s1_agent_rf_source_valid;                                        // i2c_sda_s1_agent:rf_source_valid -> i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [87:0] i2c_sda_s1_agent_rf_source_data;                                         // i2c_sda_s1_agent:rf_source_data -> i2c_sda_s1_agent_rsp_fifo:in_data
	wire         i2c_sda_s1_agent_rf_source_ready;                                        // i2c_sda_s1_agent_rsp_fifo:in_ready -> i2c_sda_s1_agent:rf_source_ready
	wire         i2c_sda_s1_agent_rf_source_startofpacket;                                // i2c_sda_s1_agent:rf_source_startofpacket -> i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_sda_s1_agent_rf_source_endofpacket;                                  // i2c_sda_s1_agent:rf_source_endofpacket -> i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_valid;                                     // i2c_sda_s1_agent_rsp_fifo:out_valid -> i2c_sda_s1_agent:rf_sink_valid
	wire  [87:0] i2c_sda_s1_agent_rsp_fifo_out_data;                                      // i2c_sda_s1_agent_rsp_fifo:out_data -> i2c_sda_s1_agent:rf_sink_data
	wire         i2c_sda_s1_agent_rsp_fifo_out_ready;                                     // i2c_sda_s1_agent:rf_sink_ready -> i2c_sda_s1_agent_rsp_fifo:out_ready
	wire         i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                             // i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_sda_s1_agent:rf_sink_startofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                               // i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_sda_s1_agent:rf_sink_endofpacket
	wire         i2c_sda_s1_agent_rdata_fifo_src_valid;                                   // i2c_sda_s1_agent:rdata_fifo_src_valid -> i2c_sda_s1_agent_rdata_fifo:in_valid
	wire  [33:0] i2c_sda_s1_agent_rdata_fifo_src_data;                                    // i2c_sda_s1_agent:rdata_fifo_src_data -> i2c_sda_s1_agent_rdata_fifo:in_data
	wire         i2c_sda_s1_agent_rdata_fifo_src_ready;                                   // i2c_sda_s1_agent_rdata_fifo:in_ready -> i2c_sda_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_valid;                                                   // cmd_mux_010:src_valid -> i2c_sda_s1_agent:cp_valid
	wire  [86:0] cmd_mux_010_src_data;                                                    // cmd_mux_010:src_data -> i2c_sda_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                   // i2c_sda_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [18:0] cmd_mux_010_src_channel;                                                 // cmd_mux_010:src_channel -> i2c_sda_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                           // cmd_mux_010:src_startofpacket -> i2c_sda_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                             // cmd_mux_010:src_endofpacket -> i2c_sda_s1_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                              // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                           // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                           // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [8:0] timer_s1_agent_m0_address;                                               // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                            // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                  // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                         // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                  // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                             // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                 // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                            // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                          // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [87:0] timer_s1_agent_rf_source_data;                                           // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                          // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                  // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                    // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                       // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [87:0] timer_s1_agent_rsp_fifo_out_data;                                        // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                       // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                               // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                 // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire         timer_s1_agent_rdata_fifo_src_valid;                                     // timer_s1_agent:rdata_fifo_src_valid -> timer_s1_agent_rdata_fifo:in_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                      // timer_s1_agent:rdata_fifo_src_data -> timer_s1_agent_rdata_fifo:in_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                     // timer_s1_agent_rdata_fifo:in_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_011_src_valid;                                                   // cmd_mux_011:src_valid -> timer_s1_agent:cp_valid
	wire  [86:0] cmd_mux_011_src_data;                                                    // cmd_mux_011:src_data -> timer_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                   // timer_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [18:0] cmd_mux_011_src_channel;                                                 // cmd_mux_011:src_channel -> timer_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                           // cmd_mux_011:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                             // cmd_mux_011:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire  [31:0] ledg_s1_agent_m0_readdata;                                               // ledg_s1_translator:uav_readdata -> ledg_s1_agent:m0_readdata
	wire         ledg_s1_agent_m0_waitrequest;                                            // ledg_s1_translator:uav_waitrequest -> ledg_s1_agent:m0_waitrequest
	wire         ledg_s1_agent_m0_debugaccess;                                            // ledg_s1_agent:m0_debugaccess -> ledg_s1_translator:uav_debugaccess
	wire   [8:0] ledg_s1_agent_m0_address;                                                // ledg_s1_agent:m0_address -> ledg_s1_translator:uav_address
	wire   [3:0] ledg_s1_agent_m0_byteenable;                                             // ledg_s1_agent:m0_byteenable -> ledg_s1_translator:uav_byteenable
	wire         ledg_s1_agent_m0_read;                                                   // ledg_s1_agent:m0_read -> ledg_s1_translator:uav_read
	wire         ledg_s1_agent_m0_readdatavalid;                                          // ledg_s1_translator:uav_readdatavalid -> ledg_s1_agent:m0_readdatavalid
	wire         ledg_s1_agent_m0_lock;                                                   // ledg_s1_agent:m0_lock -> ledg_s1_translator:uav_lock
	wire  [31:0] ledg_s1_agent_m0_writedata;                                              // ledg_s1_agent:m0_writedata -> ledg_s1_translator:uav_writedata
	wire         ledg_s1_agent_m0_write;                                                  // ledg_s1_agent:m0_write -> ledg_s1_translator:uav_write
	wire   [2:0] ledg_s1_agent_m0_burstcount;                                             // ledg_s1_agent:m0_burstcount -> ledg_s1_translator:uav_burstcount
	wire         ledg_s1_agent_rf_source_valid;                                           // ledg_s1_agent:rf_source_valid -> ledg_s1_agent_rsp_fifo:in_valid
	wire  [87:0] ledg_s1_agent_rf_source_data;                                            // ledg_s1_agent:rf_source_data -> ledg_s1_agent_rsp_fifo:in_data
	wire         ledg_s1_agent_rf_source_ready;                                           // ledg_s1_agent_rsp_fifo:in_ready -> ledg_s1_agent:rf_source_ready
	wire         ledg_s1_agent_rf_source_startofpacket;                                   // ledg_s1_agent:rf_source_startofpacket -> ledg_s1_agent_rsp_fifo:in_startofpacket
	wire         ledg_s1_agent_rf_source_endofpacket;                                     // ledg_s1_agent:rf_source_endofpacket -> ledg_s1_agent_rsp_fifo:in_endofpacket
	wire         ledg_s1_agent_rsp_fifo_out_valid;                                        // ledg_s1_agent_rsp_fifo:out_valid -> ledg_s1_agent:rf_sink_valid
	wire  [87:0] ledg_s1_agent_rsp_fifo_out_data;                                         // ledg_s1_agent_rsp_fifo:out_data -> ledg_s1_agent:rf_sink_data
	wire         ledg_s1_agent_rsp_fifo_out_ready;                                        // ledg_s1_agent:rf_sink_ready -> ledg_s1_agent_rsp_fifo:out_ready
	wire         ledg_s1_agent_rsp_fifo_out_startofpacket;                                // ledg_s1_agent_rsp_fifo:out_startofpacket -> ledg_s1_agent:rf_sink_startofpacket
	wire         ledg_s1_agent_rsp_fifo_out_endofpacket;                                  // ledg_s1_agent_rsp_fifo:out_endofpacket -> ledg_s1_agent:rf_sink_endofpacket
	wire         ledg_s1_agent_rdata_fifo_src_valid;                                      // ledg_s1_agent:rdata_fifo_src_valid -> ledg_s1_agent_rdata_fifo:in_valid
	wire  [33:0] ledg_s1_agent_rdata_fifo_src_data;                                       // ledg_s1_agent:rdata_fifo_src_data -> ledg_s1_agent_rdata_fifo:in_data
	wire         ledg_s1_agent_rdata_fifo_src_ready;                                      // ledg_s1_agent_rdata_fifo:in_ready -> ledg_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_012_src_valid;                                                   // cmd_mux_012:src_valid -> ledg_s1_agent:cp_valid
	wire  [86:0] cmd_mux_012_src_data;                                                    // cmd_mux_012:src_data -> ledg_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                   // ledg_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [18:0] cmd_mux_012_src_channel;                                                 // cmd_mux_012:src_channel -> ledg_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                           // cmd_mux_012:src_startofpacket -> ledg_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                             // cmd_mux_012:src_endofpacket -> ledg_s1_agent:cp_endofpacket
	wire  [31:0] ledr_s1_agent_m0_readdata;                                               // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire         ledr_s1_agent_m0_waitrequest;                                            // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire         ledr_s1_agent_m0_debugaccess;                                            // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [8:0] ledr_s1_agent_m0_address;                                                // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire   [3:0] ledr_s1_agent_m0_byteenable;                                             // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire         ledr_s1_agent_m0_read;                                                   // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire         ledr_s1_agent_m0_readdatavalid;                                          // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire         ledr_s1_agent_m0_lock;                                                   // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire  [31:0] ledr_s1_agent_m0_writedata;                                              // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire         ledr_s1_agent_m0_write;                                                  // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire   [2:0] ledr_s1_agent_m0_burstcount;                                             // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire         ledr_s1_agent_rf_source_valid;                                           // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [87:0] ledr_s1_agent_rf_source_data;                                            // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire         ledr_s1_agent_rf_source_ready;                                           // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire         ledr_s1_agent_rf_source_startofpacket;                                   // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire         ledr_s1_agent_rf_source_endofpacket;                                     // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire         ledr_s1_agent_rsp_fifo_out_valid;                                        // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [87:0] ledr_s1_agent_rsp_fifo_out_data;                                         // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire         ledr_s1_agent_rsp_fifo_out_ready;                                        // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire         ledr_s1_agent_rsp_fifo_out_startofpacket;                                // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire         ledr_s1_agent_rsp_fifo_out_endofpacket;                                  // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire         ledr_s1_agent_rdata_fifo_src_valid;                                      // ledr_s1_agent:rdata_fifo_src_valid -> ledr_s1_agent_rdata_fifo:in_valid
	wire  [33:0] ledr_s1_agent_rdata_fifo_src_data;                                       // ledr_s1_agent:rdata_fifo_src_data -> ledr_s1_agent_rdata_fifo:in_data
	wire         ledr_s1_agent_rdata_fifo_src_ready;                                      // ledr_s1_agent_rdata_fifo:in_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_valid;                                                   // cmd_mux_013:src_valid -> ledr_s1_agent:cp_valid
	wire  [86:0] cmd_mux_013_src_data;                                                    // cmd_mux_013:src_data -> ledr_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                   // ledr_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [18:0] cmd_mux_013_src_channel;                                                 // cmd_mux_013:src_channel -> ledr_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                           // cmd_mux_013:src_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                             // cmd_mux_013:src_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire  [31:0] ir_s1_agent_m0_readdata;                                                 // ir_s1_translator:uav_readdata -> ir_s1_agent:m0_readdata
	wire         ir_s1_agent_m0_waitrequest;                                              // ir_s1_translator:uav_waitrequest -> ir_s1_agent:m0_waitrequest
	wire         ir_s1_agent_m0_debugaccess;                                              // ir_s1_agent:m0_debugaccess -> ir_s1_translator:uav_debugaccess
	wire   [8:0] ir_s1_agent_m0_address;                                                  // ir_s1_agent:m0_address -> ir_s1_translator:uav_address
	wire   [3:0] ir_s1_agent_m0_byteenable;                                               // ir_s1_agent:m0_byteenable -> ir_s1_translator:uav_byteenable
	wire         ir_s1_agent_m0_read;                                                     // ir_s1_agent:m0_read -> ir_s1_translator:uav_read
	wire         ir_s1_agent_m0_readdatavalid;                                            // ir_s1_translator:uav_readdatavalid -> ir_s1_agent:m0_readdatavalid
	wire         ir_s1_agent_m0_lock;                                                     // ir_s1_agent:m0_lock -> ir_s1_translator:uav_lock
	wire  [31:0] ir_s1_agent_m0_writedata;                                                // ir_s1_agent:m0_writedata -> ir_s1_translator:uav_writedata
	wire         ir_s1_agent_m0_write;                                                    // ir_s1_agent:m0_write -> ir_s1_translator:uav_write
	wire   [2:0] ir_s1_agent_m0_burstcount;                                               // ir_s1_agent:m0_burstcount -> ir_s1_translator:uav_burstcount
	wire         ir_s1_agent_rf_source_valid;                                             // ir_s1_agent:rf_source_valid -> ir_s1_agent_rsp_fifo:in_valid
	wire  [87:0] ir_s1_agent_rf_source_data;                                              // ir_s1_agent:rf_source_data -> ir_s1_agent_rsp_fifo:in_data
	wire         ir_s1_agent_rf_source_ready;                                             // ir_s1_agent_rsp_fifo:in_ready -> ir_s1_agent:rf_source_ready
	wire         ir_s1_agent_rf_source_startofpacket;                                     // ir_s1_agent:rf_source_startofpacket -> ir_s1_agent_rsp_fifo:in_startofpacket
	wire         ir_s1_agent_rf_source_endofpacket;                                       // ir_s1_agent:rf_source_endofpacket -> ir_s1_agent_rsp_fifo:in_endofpacket
	wire         ir_s1_agent_rsp_fifo_out_valid;                                          // ir_s1_agent_rsp_fifo:out_valid -> ir_s1_agent:rf_sink_valid
	wire  [87:0] ir_s1_agent_rsp_fifo_out_data;                                           // ir_s1_agent_rsp_fifo:out_data -> ir_s1_agent:rf_sink_data
	wire         ir_s1_agent_rsp_fifo_out_ready;                                          // ir_s1_agent:rf_sink_ready -> ir_s1_agent_rsp_fifo:out_ready
	wire         ir_s1_agent_rsp_fifo_out_startofpacket;                                  // ir_s1_agent_rsp_fifo:out_startofpacket -> ir_s1_agent:rf_sink_startofpacket
	wire         ir_s1_agent_rsp_fifo_out_endofpacket;                                    // ir_s1_agent_rsp_fifo:out_endofpacket -> ir_s1_agent:rf_sink_endofpacket
	wire         ir_s1_agent_rdata_fifo_src_valid;                                        // ir_s1_agent:rdata_fifo_src_valid -> ir_s1_agent_rdata_fifo:in_valid
	wire  [33:0] ir_s1_agent_rdata_fifo_src_data;                                         // ir_s1_agent:rdata_fifo_src_data -> ir_s1_agent_rdata_fifo:in_data
	wire         ir_s1_agent_rdata_fifo_src_ready;                                        // ir_s1_agent_rdata_fifo:in_ready -> ir_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_014_src_valid;                                                   // cmd_mux_014:src_valid -> ir_s1_agent:cp_valid
	wire  [86:0] cmd_mux_014_src_data;                                                    // cmd_mux_014:src_data -> ir_s1_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                   // ir_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [18:0] cmd_mux_014_src_channel;                                                 // cmd_mux_014:src_channel -> ir_s1_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                           // cmd_mux_014:src_startofpacket -> ir_s1_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                             // cmd_mux_014:src_endofpacket -> ir_s1_agent:cp_endofpacket
	wire  [31:0] rs232_s1_agent_m0_readdata;                                              // rs232_s1_translator:uav_readdata -> rs232_s1_agent:m0_readdata
	wire         rs232_s1_agent_m0_waitrequest;                                           // rs232_s1_translator:uav_waitrequest -> rs232_s1_agent:m0_waitrequest
	wire         rs232_s1_agent_m0_debugaccess;                                           // rs232_s1_agent:m0_debugaccess -> rs232_s1_translator:uav_debugaccess
	wire   [8:0] rs232_s1_agent_m0_address;                                               // rs232_s1_agent:m0_address -> rs232_s1_translator:uav_address
	wire   [3:0] rs232_s1_agent_m0_byteenable;                                            // rs232_s1_agent:m0_byteenable -> rs232_s1_translator:uav_byteenable
	wire         rs232_s1_agent_m0_read;                                                  // rs232_s1_agent:m0_read -> rs232_s1_translator:uav_read
	wire         rs232_s1_agent_m0_readdatavalid;                                         // rs232_s1_translator:uav_readdatavalid -> rs232_s1_agent:m0_readdatavalid
	wire         rs232_s1_agent_m0_lock;                                                  // rs232_s1_agent:m0_lock -> rs232_s1_translator:uav_lock
	wire  [31:0] rs232_s1_agent_m0_writedata;                                             // rs232_s1_agent:m0_writedata -> rs232_s1_translator:uav_writedata
	wire         rs232_s1_agent_m0_write;                                                 // rs232_s1_agent:m0_write -> rs232_s1_translator:uav_write
	wire   [2:0] rs232_s1_agent_m0_burstcount;                                            // rs232_s1_agent:m0_burstcount -> rs232_s1_translator:uav_burstcount
	wire         rs232_s1_agent_rf_source_valid;                                          // rs232_s1_agent:rf_source_valid -> rs232_s1_agent_rsp_fifo:in_valid
	wire  [87:0] rs232_s1_agent_rf_source_data;                                           // rs232_s1_agent:rf_source_data -> rs232_s1_agent_rsp_fifo:in_data
	wire         rs232_s1_agent_rf_source_ready;                                          // rs232_s1_agent_rsp_fifo:in_ready -> rs232_s1_agent:rf_source_ready
	wire         rs232_s1_agent_rf_source_startofpacket;                                  // rs232_s1_agent:rf_source_startofpacket -> rs232_s1_agent_rsp_fifo:in_startofpacket
	wire         rs232_s1_agent_rf_source_endofpacket;                                    // rs232_s1_agent:rf_source_endofpacket -> rs232_s1_agent_rsp_fifo:in_endofpacket
	wire         rs232_s1_agent_rsp_fifo_out_valid;                                       // rs232_s1_agent_rsp_fifo:out_valid -> rs232_s1_agent:rf_sink_valid
	wire  [87:0] rs232_s1_agent_rsp_fifo_out_data;                                        // rs232_s1_agent_rsp_fifo:out_data -> rs232_s1_agent:rf_sink_data
	wire         rs232_s1_agent_rsp_fifo_out_ready;                                       // rs232_s1_agent:rf_sink_ready -> rs232_s1_agent_rsp_fifo:out_ready
	wire         rs232_s1_agent_rsp_fifo_out_startofpacket;                               // rs232_s1_agent_rsp_fifo:out_startofpacket -> rs232_s1_agent:rf_sink_startofpacket
	wire         rs232_s1_agent_rsp_fifo_out_endofpacket;                                 // rs232_s1_agent_rsp_fifo:out_endofpacket -> rs232_s1_agent:rf_sink_endofpacket
	wire         rs232_s1_agent_rdata_fifo_src_valid;                                     // rs232_s1_agent:rdata_fifo_src_valid -> rs232_s1_agent_rdata_fifo:in_valid
	wire  [33:0] rs232_s1_agent_rdata_fifo_src_data;                                      // rs232_s1_agent:rdata_fifo_src_data -> rs232_s1_agent_rdata_fifo:in_data
	wire         rs232_s1_agent_rdata_fifo_src_ready;                                     // rs232_s1_agent_rdata_fifo:in_ready -> rs232_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_015_src_valid;                                                   // cmd_mux_015:src_valid -> rs232_s1_agent:cp_valid
	wire  [86:0] cmd_mux_015_src_data;                                                    // cmd_mux_015:src_data -> rs232_s1_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                   // rs232_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [18:0] cmd_mux_015_src_channel;                                                 // cmd_mux_015:src_channel -> rs232_s1_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                           // cmd_mux_015:src_startofpacket -> rs232_s1_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                             // cmd_mux_015:src_endofpacket -> rs232_s1_agent:cp_endofpacket
	wire  [31:0] to_sw_sig_s1_agent_m0_readdata;                                          // to_sw_sig_s1_translator:uav_readdata -> to_sw_sig_s1_agent:m0_readdata
	wire         to_sw_sig_s1_agent_m0_waitrequest;                                       // to_sw_sig_s1_translator:uav_waitrequest -> to_sw_sig_s1_agent:m0_waitrequest
	wire         to_sw_sig_s1_agent_m0_debugaccess;                                       // to_sw_sig_s1_agent:m0_debugaccess -> to_sw_sig_s1_translator:uav_debugaccess
	wire   [8:0] to_sw_sig_s1_agent_m0_address;                                           // to_sw_sig_s1_agent:m0_address -> to_sw_sig_s1_translator:uav_address
	wire   [3:0] to_sw_sig_s1_agent_m0_byteenable;                                        // to_sw_sig_s1_agent:m0_byteenable -> to_sw_sig_s1_translator:uav_byteenable
	wire         to_sw_sig_s1_agent_m0_read;                                              // to_sw_sig_s1_agent:m0_read -> to_sw_sig_s1_translator:uav_read
	wire         to_sw_sig_s1_agent_m0_readdatavalid;                                     // to_sw_sig_s1_translator:uav_readdatavalid -> to_sw_sig_s1_agent:m0_readdatavalid
	wire         to_sw_sig_s1_agent_m0_lock;                                              // to_sw_sig_s1_agent:m0_lock -> to_sw_sig_s1_translator:uav_lock
	wire  [31:0] to_sw_sig_s1_agent_m0_writedata;                                         // to_sw_sig_s1_agent:m0_writedata -> to_sw_sig_s1_translator:uav_writedata
	wire         to_sw_sig_s1_agent_m0_write;                                             // to_sw_sig_s1_agent:m0_write -> to_sw_sig_s1_translator:uav_write
	wire   [2:0] to_sw_sig_s1_agent_m0_burstcount;                                        // to_sw_sig_s1_agent:m0_burstcount -> to_sw_sig_s1_translator:uav_burstcount
	wire         to_sw_sig_s1_agent_rf_source_valid;                                      // to_sw_sig_s1_agent:rf_source_valid -> to_sw_sig_s1_agent_rsp_fifo:in_valid
	wire  [87:0] to_sw_sig_s1_agent_rf_source_data;                                       // to_sw_sig_s1_agent:rf_source_data -> to_sw_sig_s1_agent_rsp_fifo:in_data
	wire         to_sw_sig_s1_agent_rf_source_ready;                                      // to_sw_sig_s1_agent_rsp_fifo:in_ready -> to_sw_sig_s1_agent:rf_source_ready
	wire         to_sw_sig_s1_agent_rf_source_startofpacket;                              // to_sw_sig_s1_agent:rf_source_startofpacket -> to_sw_sig_s1_agent_rsp_fifo:in_startofpacket
	wire         to_sw_sig_s1_agent_rf_source_endofpacket;                                // to_sw_sig_s1_agent:rf_source_endofpacket -> to_sw_sig_s1_agent_rsp_fifo:in_endofpacket
	wire         to_sw_sig_s1_agent_rsp_fifo_out_valid;                                   // to_sw_sig_s1_agent_rsp_fifo:out_valid -> to_sw_sig_s1_agent:rf_sink_valid
	wire  [87:0] to_sw_sig_s1_agent_rsp_fifo_out_data;                                    // to_sw_sig_s1_agent_rsp_fifo:out_data -> to_sw_sig_s1_agent:rf_sink_data
	wire         to_sw_sig_s1_agent_rsp_fifo_out_ready;                                   // to_sw_sig_s1_agent:rf_sink_ready -> to_sw_sig_s1_agent_rsp_fifo:out_ready
	wire         to_sw_sig_s1_agent_rsp_fifo_out_startofpacket;                           // to_sw_sig_s1_agent_rsp_fifo:out_startofpacket -> to_sw_sig_s1_agent:rf_sink_startofpacket
	wire         to_sw_sig_s1_agent_rsp_fifo_out_endofpacket;                             // to_sw_sig_s1_agent_rsp_fifo:out_endofpacket -> to_sw_sig_s1_agent:rf_sink_endofpacket
	wire         to_sw_sig_s1_agent_rdata_fifo_src_valid;                                 // to_sw_sig_s1_agent:rdata_fifo_src_valid -> to_sw_sig_s1_agent_rdata_fifo:in_valid
	wire  [33:0] to_sw_sig_s1_agent_rdata_fifo_src_data;                                  // to_sw_sig_s1_agent:rdata_fifo_src_data -> to_sw_sig_s1_agent_rdata_fifo:in_data
	wire         to_sw_sig_s1_agent_rdata_fifo_src_ready;                                 // to_sw_sig_s1_agent_rdata_fifo:in_ready -> to_sw_sig_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_016_src_valid;                                                   // cmd_mux_016:src_valid -> to_sw_sig_s1_agent:cp_valid
	wire  [86:0] cmd_mux_016_src_data;                                                    // cmd_mux_016:src_data -> to_sw_sig_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                   // to_sw_sig_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [18:0] cmd_mux_016_src_channel;                                                 // cmd_mux_016:src_channel -> to_sw_sig_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                           // cmd_mux_016:src_startofpacket -> to_sw_sig_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                             // cmd_mux_016:src_endofpacket -> to_sw_sig_s1_agent:cp_endofpacket
	wire  [31:0] to_hw_sig_s1_agent_m0_readdata;                                          // to_hw_sig_s1_translator:uav_readdata -> to_hw_sig_s1_agent:m0_readdata
	wire         to_hw_sig_s1_agent_m0_waitrequest;                                       // to_hw_sig_s1_translator:uav_waitrequest -> to_hw_sig_s1_agent:m0_waitrequest
	wire         to_hw_sig_s1_agent_m0_debugaccess;                                       // to_hw_sig_s1_agent:m0_debugaccess -> to_hw_sig_s1_translator:uav_debugaccess
	wire   [8:0] to_hw_sig_s1_agent_m0_address;                                           // to_hw_sig_s1_agent:m0_address -> to_hw_sig_s1_translator:uav_address
	wire   [3:0] to_hw_sig_s1_agent_m0_byteenable;                                        // to_hw_sig_s1_agent:m0_byteenable -> to_hw_sig_s1_translator:uav_byteenable
	wire         to_hw_sig_s1_agent_m0_read;                                              // to_hw_sig_s1_agent:m0_read -> to_hw_sig_s1_translator:uav_read
	wire         to_hw_sig_s1_agent_m0_readdatavalid;                                     // to_hw_sig_s1_translator:uav_readdatavalid -> to_hw_sig_s1_agent:m0_readdatavalid
	wire         to_hw_sig_s1_agent_m0_lock;                                              // to_hw_sig_s1_agent:m0_lock -> to_hw_sig_s1_translator:uav_lock
	wire  [31:0] to_hw_sig_s1_agent_m0_writedata;                                         // to_hw_sig_s1_agent:m0_writedata -> to_hw_sig_s1_translator:uav_writedata
	wire         to_hw_sig_s1_agent_m0_write;                                             // to_hw_sig_s1_agent:m0_write -> to_hw_sig_s1_translator:uav_write
	wire   [2:0] to_hw_sig_s1_agent_m0_burstcount;                                        // to_hw_sig_s1_agent:m0_burstcount -> to_hw_sig_s1_translator:uav_burstcount
	wire         to_hw_sig_s1_agent_rf_source_valid;                                      // to_hw_sig_s1_agent:rf_source_valid -> to_hw_sig_s1_agent_rsp_fifo:in_valid
	wire  [87:0] to_hw_sig_s1_agent_rf_source_data;                                       // to_hw_sig_s1_agent:rf_source_data -> to_hw_sig_s1_agent_rsp_fifo:in_data
	wire         to_hw_sig_s1_agent_rf_source_ready;                                      // to_hw_sig_s1_agent_rsp_fifo:in_ready -> to_hw_sig_s1_agent:rf_source_ready
	wire         to_hw_sig_s1_agent_rf_source_startofpacket;                              // to_hw_sig_s1_agent:rf_source_startofpacket -> to_hw_sig_s1_agent_rsp_fifo:in_startofpacket
	wire         to_hw_sig_s1_agent_rf_source_endofpacket;                                // to_hw_sig_s1_agent:rf_source_endofpacket -> to_hw_sig_s1_agent_rsp_fifo:in_endofpacket
	wire         to_hw_sig_s1_agent_rsp_fifo_out_valid;                                   // to_hw_sig_s1_agent_rsp_fifo:out_valid -> to_hw_sig_s1_agent:rf_sink_valid
	wire  [87:0] to_hw_sig_s1_agent_rsp_fifo_out_data;                                    // to_hw_sig_s1_agent_rsp_fifo:out_data -> to_hw_sig_s1_agent:rf_sink_data
	wire         to_hw_sig_s1_agent_rsp_fifo_out_ready;                                   // to_hw_sig_s1_agent:rf_sink_ready -> to_hw_sig_s1_agent_rsp_fifo:out_ready
	wire         to_hw_sig_s1_agent_rsp_fifo_out_startofpacket;                           // to_hw_sig_s1_agent_rsp_fifo:out_startofpacket -> to_hw_sig_s1_agent:rf_sink_startofpacket
	wire         to_hw_sig_s1_agent_rsp_fifo_out_endofpacket;                             // to_hw_sig_s1_agent_rsp_fifo:out_endofpacket -> to_hw_sig_s1_agent:rf_sink_endofpacket
	wire         to_hw_sig_s1_agent_rdata_fifo_src_valid;                                 // to_hw_sig_s1_agent:rdata_fifo_src_valid -> to_hw_sig_s1_agent_rdata_fifo:in_valid
	wire  [33:0] to_hw_sig_s1_agent_rdata_fifo_src_data;                                  // to_hw_sig_s1_agent:rdata_fifo_src_data -> to_hw_sig_s1_agent_rdata_fifo:in_data
	wire         to_hw_sig_s1_agent_rdata_fifo_src_ready;                                 // to_hw_sig_s1_agent_rdata_fifo:in_ready -> to_hw_sig_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_017_src_valid;                                                   // cmd_mux_017:src_valid -> to_hw_sig_s1_agent:cp_valid
	wire  [86:0] cmd_mux_017_src_data;                                                    // cmd_mux_017:src_data -> to_hw_sig_s1_agent:cp_data
	wire         cmd_mux_017_src_ready;                                                   // to_hw_sig_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire  [18:0] cmd_mux_017_src_channel;                                                 // cmd_mux_017:src_channel -> to_hw_sig_s1_agent:cp_channel
	wire         cmd_mux_017_src_startofpacket;                                           // cmd_mux_017:src_startofpacket -> to_hw_sig_s1_agent:cp_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                             // cmd_mux_017:src_endofpacket -> to_hw_sig_s1_agent:cp_endofpacket
	wire  [31:0] to_hw_port_s1_agent_m0_readdata;                                         // to_hw_port_s1_translator:uav_readdata -> to_hw_port_s1_agent:m0_readdata
	wire         to_hw_port_s1_agent_m0_waitrequest;                                      // to_hw_port_s1_translator:uav_waitrequest -> to_hw_port_s1_agent:m0_waitrequest
	wire         to_hw_port_s1_agent_m0_debugaccess;                                      // to_hw_port_s1_agent:m0_debugaccess -> to_hw_port_s1_translator:uav_debugaccess
	wire   [8:0] to_hw_port_s1_agent_m0_address;                                          // to_hw_port_s1_agent:m0_address -> to_hw_port_s1_translator:uav_address
	wire   [3:0] to_hw_port_s1_agent_m0_byteenable;                                       // to_hw_port_s1_agent:m0_byteenable -> to_hw_port_s1_translator:uav_byteenable
	wire         to_hw_port_s1_agent_m0_read;                                             // to_hw_port_s1_agent:m0_read -> to_hw_port_s1_translator:uav_read
	wire         to_hw_port_s1_agent_m0_readdatavalid;                                    // to_hw_port_s1_translator:uav_readdatavalid -> to_hw_port_s1_agent:m0_readdatavalid
	wire         to_hw_port_s1_agent_m0_lock;                                             // to_hw_port_s1_agent:m0_lock -> to_hw_port_s1_translator:uav_lock
	wire  [31:0] to_hw_port_s1_agent_m0_writedata;                                        // to_hw_port_s1_agent:m0_writedata -> to_hw_port_s1_translator:uav_writedata
	wire         to_hw_port_s1_agent_m0_write;                                            // to_hw_port_s1_agent:m0_write -> to_hw_port_s1_translator:uav_write
	wire   [2:0] to_hw_port_s1_agent_m0_burstcount;                                       // to_hw_port_s1_agent:m0_burstcount -> to_hw_port_s1_translator:uav_burstcount
	wire         to_hw_port_s1_agent_rf_source_valid;                                     // to_hw_port_s1_agent:rf_source_valid -> to_hw_port_s1_agent_rsp_fifo:in_valid
	wire  [87:0] to_hw_port_s1_agent_rf_source_data;                                      // to_hw_port_s1_agent:rf_source_data -> to_hw_port_s1_agent_rsp_fifo:in_data
	wire         to_hw_port_s1_agent_rf_source_ready;                                     // to_hw_port_s1_agent_rsp_fifo:in_ready -> to_hw_port_s1_agent:rf_source_ready
	wire         to_hw_port_s1_agent_rf_source_startofpacket;                             // to_hw_port_s1_agent:rf_source_startofpacket -> to_hw_port_s1_agent_rsp_fifo:in_startofpacket
	wire         to_hw_port_s1_agent_rf_source_endofpacket;                               // to_hw_port_s1_agent:rf_source_endofpacket -> to_hw_port_s1_agent_rsp_fifo:in_endofpacket
	wire         to_hw_port_s1_agent_rsp_fifo_out_valid;                                  // to_hw_port_s1_agent_rsp_fifo:out_valid -> to_hw_port_s1_agent:rf_sink_valid
	wire  [87:0] to_hw_port_s1_agent_rsp_fifo_out_data;                                   // to_hw_port_s1_agent_rsp_fifo:out_data -> to_hw_port_s1_agent:rf_sink_data
	wire         to_hw_port_s1_agent_rsp_fifo_out_ready;                                  // to_hw_port_s1_agent:rf_sink_ready -> to_hw_port_s1_agent_rsp_fifo:out_ready
	wire         to_hw_port_s1_agent_rsp_fifo_out_startofpacket;                          // to_hw_port_s1_agent_rsp_fifo:out_startofpacket -> to_hw_port_s1_agent:rf_sink_startofpacket
	wire         to_hw_port_s1_agent_rsp_fifo_out_endofpacket;                            // to_hw_port_s1_agent_rsp_fifo:out_endofpacket -> to_hw_port_s1_agent:rf_sink_endofpacket
	wire         to_hw_port_s1_agent_rdata_fifo_src_valid;                                // to_hw_port_s1_agent:rdata_fifo_src_valid -> to_hw_port_s1_agent_rdata_fifo:in_valid
	wire  [33:0] to_hw_port_s1_agent_rdata_fifo_src_data;                                 // to_hw_port_s1_agent:rdata_fifo_src_data -> to_hw_port_s1_agent_rdata_fifo:in_data
	wire         to_hw_port_s1_agent_rdata_fifo_src_ready;                                // to_hw_port_s1_agent_rdata_fifo:in_ready -> to_hw_port_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_018_src_valid;                                                   // cmd_mux_018:src_valid -> to_hw_port_s1_agent:cp_valid
	wire  [86:0] cmd_mux_018_src_data;                                                    // cmd_mux_018:src_data -> to_hw_port_s1_agent:cp_data
	wire         cmd_mux_018_src_ready;                                                   // to_hw_port_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire  [18:0] cmd_mux_018_src_channel;                                                 // cmd_mux_018:src_channel -> to_hw_port_s1_agent:cp_channel
	wire         cmd_mux_018_src_startofpacket;                                           // cmd_mux_018:src_startofpacket -> to_hw_port_s1_agent:cp_startofpacket
	wire         cmd_mux_018_src_endofpacket;                                             // cmd_mux_018:src_endofpacket -> to_hw_port_s1_agent:cp_endofpacket
	wire         clock_crossing_io_m0_agent_cp_valid;                                     // clock_crossing_io_m0_agent:cp_valid -> router:sink_valid
	wire  [86:0] clock_crossing_io_m0_agent_cp_data;                                      // clock_crossing_io_m0_agent:cp_data -> router:sink_data
	wire         clock_crossing_io_m0_agent_cp_ready;                                     // router:sink_ready -> clock_crossing_io_m0_agent:cp_ready
	wire         clock_crossing_io_m0_agent_cp_startofpacket;                             // clock_crossing_io_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         clock_crossing_io_m0_agent_cp_endofpacket;                               // clock_crossing_io_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         lcd_control_slave_agent_rp_valid;                                        // lcd_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [86:0] lcd_control_slave_agent_rp_data;                                         // lcd_control_slave_agent:rp_data -> router_001:sink_data
	wire         lcd_control_slave_agent_rp_ready;                                        // router_001:sink_ready -> lcd_control_slave_agent:rp_ready
	wire         lcd_control_slave_agent_rp_startofpacket;                                // lcd_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         lcd_control_slave_agent_rp_endofpacket;                                  // lcd_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [86:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire  [18:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         key_s1_agent_rp_valid;                                                   // key_s1_agent:rp_valid -> router_002:sink_valid
	wire  [86:0] key_s1_agent_rp_data;                                                    // key_s1_agent:rp_data -> router_002:sink_data
	wire         key_s1_agent_rp_ready;                                                   // router_002:sink_ready -> key_s1_agent:rp_ready
	wire         key_s1_agent_rp_startofpacket;                                           // key_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         key_s1_agent_rp_endofpacket;                                             // key_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [86:0] router_002_src_data;                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire  [18:0] router_002_src_channel;                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         sd_clk_s1_agent_rp_valid;                                                // sd_clk_s1_agent:rp_valid -> router_003:sink_valid
	wire  [86:0] sd_clk_s1_agent_rp_data;                                                 // sd_clk_s1_agent:rp_data -> router_003:sink_data
	wire         sd_clk_s1_agent_rp_ready;                                                // router_003:sink_ready -> sd_clk_s1_agent:rp_ready
	wire         sd_clk_s1_agent_rp_startofpacket;                                        // sd_clk_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sd_clk_s1_agent_rp_endofpacket;                                          // sd_clk_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [86:0] router_003_src_data;                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire  [18:0] router_003_src_channel;                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         sd_cmd_s1_agent_rp_valid;                                                // sd_cmd_s1_agent:rp_valid -> router_004:sink_valid
	wire  [86:0] sd_cmd_s1_agent_rp_data;                                                 // sd_cmd_s1_agent:rp_data -> router_004:sink_data
	wire         sd_cmd_s1_agent_rp_ready;                                                // router_004:sink_ready -> sd_cmd_s1_agent:rp_ready
	wire         sd_cmd_s1_agent_rp_startofpacket;                                        // sd_cmd_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         sd_cmd_s1_agent_rp_endofpacket;                                          // sd_cmd_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [86:0] router_004_src_data;                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire  [18:0] router_004_src_channel;                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         sd_dat_s1_agent_rp_valid;                                                // sd_dat_s1_agent:rp_valid -> router_005:sink_valid
	wire  [86:0] sd_dat_s1_agent_rp_data;                                                 // sd_dat_s1_agent:rp_data -> router_005:sink_data
	wire         sd_dat_s1_agent_rp_ready;                                                // router_005:sink_ready -> sd_dat_s1_agent:rp_ready
	wire         sd_dat_s1_agent_rp_startofpacket;                                        // sd_dat_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         sd_dat_s1_agent_rp_endofpacket;                                          // sd_dat_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [86:0] router_005_src_data;                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire  [18:0] router_005_src_channel;                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         sd_wp_n_s1_agent_rp_valid;                                               // sd_wp_n_s1_agent:rp_valid -> router_006:sink_valid
	wire  [86:0] sd_wp_n_s1_agent_rp_data;                                                // sd_wp_n_s1_agent:rp_data -> router_006:sink_data
	wire         sd_wp_n_s1_agent_rp_ready;                                               // router_006:sink_ready -> sd_wp_n_s1_agent:rp_ready
	wire         sd_wp_n_s1_agent_rp_startofpacket;                                       // sd_wp_n_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         sd_wp_n_s1_agent_rp_endofpacket;                                         // sd_wp_n_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [86:0] router_006_src_data;                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire  [18:0] router_006_src_channel;                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         epp_i2c_scl_s1_agent_rp_valid;                                           // epp_i2c_scl_s1_agent:rp_valid -> router_007:sink_valid
	wire  [86:0] epp_i2c_scl_s1_agent_rp_data;                                            // epp_i2c_scl_s1_agent:rp_data -> router_007:sink_data
	wire         epp_i2c_scl_s1_agent_rp_ready;                                           // router_007:sink_ready -> epp_i2c_scl_s1_agent:rp_ready
	wire         epp_i2c_scl_s1_agent_rp_startofpacket;                                   // epp_i2c_scl_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         epp_i2c_scl_s1_agent_rp_endofpacket;                                     // epp_i2c_scl_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                    // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [86:0] router_007_src_data;                                                     // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                    // rsp_demux_006:sink_ready -> router_007:src_ready
	wire  [18:0] router_007_src_channel;                                                  // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                            // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                              // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         epp_i2c_sda_s1_agent_rp_valid;                                           // epp_i2c_sda_s1_agent:rp_valid -> router_008:sink_valid
	wire  [86:0] epp_i2c_sda_s1_agent_rp_data;                                            // epp_i2c_sda_s1_agent:rp_data -> router_008:sink_data
	wire         epp_i2c_sda_s1_agent_rp_ready;                                           // router_008:sink_ready -> epp_i2c_sda_s1_agent:rp_ready
	wire         epp_i2c_sda_s1_agent_rp_startofpacket;                                   // epp_i2c_sda_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         epp_i2c_sda_s1_agent_rp_endofpacket;                                     // epp_i2c_sda_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                    // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [86:0] router_008_src_data;                                                     // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                                    // rsp_demux_007:sink_ready -> router_008:src_ready
	wire  [18:0] router_008_src_channel;                                                  // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                            // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                              // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         sw_s1_agent_rp_valid;                                                    // sw_s1_agent:rp_valid -> router_009:sink_valid
	wire  [86:0] sw_s1_agent_rp_data;                                                     // sw_s1_agent:rp_data -> router_009:sink_data
	wire         sw_s1_agent_rp_ready;                                                    // router_009:sink_ready -> sw_s1_agent:rp_ready
	wire         sw_s1_agent_rp_startofpacket;                                            // sw_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         sw_s1_agent_rp_endofpacket;                                              // sw_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                    // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [86:0] router_009_src_data;                                                     // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                                    // rsp_demux_008:sink_ready -> router_009:src_ready
	wire  [18:0] router_009_src_channel;                                                  // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                            // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                              // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         i2c_scl_s1_agent_rp_valid;                                               // i2c_scl_s1_agent:rp_valid -> router_010:sink_valid
	wire  [86:0] i2c_scl_s1_agent_rp_data;                                                // i2c_scl_s1_agent:rp_data -> router_010:sink_data
	wire         i2c_scl_s1_agent_rp_ready;                                               // router_010:sink_ready -> i2c_scl_s1_agent:rp_ready
	wire         i2c_scl_s1_agent_rp_startofpacket;                                       // i2c_scl_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         i2c_scl_s1_agent_rp_endofpacket;                                         // i2c_scl_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                    // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [86:0] router_010_src_data;                                                     // router_010:src_data -> rsp_demux_009:sink_data
	wire         router_010_src_ready;                                                    // rsp_demux_009:sink_ready -> router_010:src_ready
	wire  [18:0] router_010_src_channel;                                                  // router_010:src_channel -> rsp_demux_009:sink_channel
	wire         router_010_src_startofpacket;                                            // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_010_src_endofpacket;                                              // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         i2c_sda_s1_agent_rp_valid;                                               // i2c_sda_s1_agent:rp_valid -> router_011:sink_valid
	wire  [86:0] i2c_sda_s1_agent_rp_data;                                                // i2c_sda_s1_agent:rp_data -> router_011:sink_data
	wire         i2c_sda_s1_agent_rp_ready;                                               // router_011:sink_ready -> i2c_sda_s1_agent:rp_ready
	wire         i2c_sda_s1_agent_rp_startofpacket;                                       // i2c_sda_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         i2c_sda_s1_agent_rp_endofpacket;                                         // i2c_sda_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                    // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [86:0] router_011_src_data;                                                     // router_011:src_data -> rsp_demux_010:sink_data
	wire         router_011_src_ready;                                                    // rsp_demux_010:sink_ready -> router_011:src_ready
	wire  [18:0] router_011_src_channel;                                                  // router_011:src_channel -> rsp_demux_010:sink_channel
	wire         router_011_src_startofpacket;                                            // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_011_src_endofpacket;                                              // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                 // timer_s1_agent:rp_valid -> router_012:sink_valid
	wire  [86:0] timer_s1_agent_rp_data;                                                  // timer_s1_agent:rp_data -> router_012:sink_data
	wire         timer_s1_agent_rp_ready;                                                 // router_012:sink_ready -> timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                         // timer_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                           // timer_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                    // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [86:0] router_012_src_data;                                                     // router_012:src_data -> rsp_demux_011:sink_data
	wire         router_012_src_ready;                                                    // rsp_demux_011:sink_ready -> router_012:src_ready
	wire  [18:0] router_012_src_channel;                                                  // router_012:src_channel -> rsp_demux_011:sink_channel
	wire         router_012_src_startofpacket;                                            // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_012_src_endofpacket;                                              // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         ledg_s1_agent_rp_valid;                                                  // ledg_s1_agent:rp_valid -> router_013:sink_valid
	wire  [86:0] ledg_s1_agent_rp_data;                                                   // ledg_s1_agent:rp_data -> router_013:sink_data
	wire         ledg_s1_agent_rp_ready;                                                  // router_013:sink_ready -> ledg_s1_agent:rp_ready
	wire         ledg_s1_agent_rp_startofpacket;                                          // ledg_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         ledg_s1_agent_rp_endofpacket;                                            // ledg_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                    // router_013:src_valid -> rsp_demux_012:sink_valid
	wire  [86:0] router_013_src_data;                                                     // router_013:src_data -> rsp_demux_012:sink_data
	wire         router_013_src_ready;                                                    // rsp_demux_012:sink_ready -> router_013:src_ready
	wire  [18:0] router_013_src_channel;                                                  // router_013:src_channel -> rsp_demux_012:sink_channel
	wire         router_013_src_startofpacket;                                            // router_013:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_013_src_endofpacket;                                              // router_013:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         ledr_s1_agent_rp_valid;                                                  // ledr_s1_agent:rp_valid -> router_014:sink_valid
	wire  [86:0] ledr_s1_agent_rp_data;                                                   // ledr_s1_agent:rp_data -> router_014:sink_data
	wire         ledr_s1_agent_rp_ready;                                                  // router_014:sink_ready -> ledr_s1_agent:rp_ready
	wire         ledr_s1_agent_rp_startofpacket;                                          // ledr_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         ledr_s1_agent_rp_endofpacket;                                            // ledr_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                    // router_014:src_valid -> rsp_demux_013:sink_valid
	wire  [86:0] router_014_src_data;                                                     // router_014:src_data -> rsp_demux_013:sink_data
	wire         router_014_src_ready;                                                    // rsp_demux_013:sink_ready -> router_014:src_ready
	wire  [18:0] router_014_src_channel;                                                  // router_014:src_channel -> rsp_demux_013:sink_channel
	wire         router_014_src_startofpacket;                                            // router_014:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_014_src_endofpacket;                                              // router_014:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         ir_s1_agent_rp_valid;                                                    // ir_s1_agent:rp_valid -> router_015:sink_valid
	wire  [86:0] ir_s1_agent_rp_data;                                                     // ir_s1_agent:rp_data -> router_015:sink_data
	wire         ir_s1_agent_rp_ready;                                                    // router_015:sink_ready -> ir_s1_agent:rp_ready
	wire         ir_s1_agent_rp_startofpacket;                                            // ir_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         ir_s1_agent_rp_endofpacket;                                              // ir_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                    // router_015:src_valid -> rsp_demux_014:sink_valid
	wire  [86:0] router_015_src_data;                                                     // router_015:src_data -> rsp_demux_014:sink_data
	wire         router_015_src_ready;                                                    // rsp_demux_014:sink_ready -> router_015:src_ready
	wire  [18:0] router_015_src_channel;                                                  // router_015:src_channel -> rsp_demux_014:sink_channel
	wire         router_015_src_startofpacket;                                            // router_015:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_015_src_endofpacket;                                              // router_015:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         rs232_s1_agent_rp_valid;                                                 // rs232_s1_agent:rp_valid -> router_016:sink_valid
	wire  [86:0] rs232_s1_agent_rp_data;                                                  // rs232_s1_agent:rp_data -> router_016:sink_data
	wire         rs232_s1_agent_rp_ready;                                                 // router_016:sink_ready -> rs232_s1_agent:rp_ready
	wire         rs232_s1_agent_rp_startofpacket;                                         // rs232_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         rs232_s1_agent_rp_endofpacket;                                           // rs232_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                    // router_016:src_valid -> rsp_demux_015:sink_valid
	wire  [86:0] router_016_src_data;                                                     // router_016:src_data -> rsp_demux_015:sink_data
	wire         router_016_src_ready;                                                    // rsp_demux_015:sink_ready -> router_016:src_ready
	wire  [18:0] router_016_src_channel;                                                  // router_016:src_channel -> rsp_demux_015:sink_channel
	wire         router_016_src_startofpacket;                                            // router_016:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_016_src_endofpacket;                                              // router_016:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         to_sw_sig_s1_agent_rp_valid;                                             // to_sw_sig_s1_agent:rp_valid -> router_017:sink_valid
	wire  [86:0] to_sw_sig_s1_agent_rp_data;                                              // to_sw_sig_s1_agent:rp_data -> router_017:sink_data
	wire         to_sw_sig_s1_agent_rp_ready;                                             // router_017:sink_ready -> to_sw_sig_s1_agent:rp_ready
	wire         to_sw_sig_s1_agent_rp_startofpacket;                                     // to_sw_sig_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         to_sw_sig_s1_agent_rp_endofpacket;                                       // to_sw_sig_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                    // router_017:src_valid -> rsp_demux_016:sink_valid
	wire  [86:0] router_017_src_data;                                                     // router_017:src_data -> rsp_demux_016:sink_data
	wire         router_017_src_ready;                                                    // rsp_demux_016:sink_ready -> router_017:src_ready
	wire  [18:0] router_017_src_channel;                                                  // router_017:src_channel -> rsp_demux_016:sink_channel
	wire         router_017_src_startofpacket;                                            // router_017:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_017_src_endofpacket;                                              // router_017:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         to_hw_sig_s1_agent_rp_valid;                                             // to_hw_sig_s1_agent:rp_valid -> router_018:sink_valid
	wire  [86:0] to_hw_sig_s1_agent_rp_data;                                              // to_hw_sig_s1_agent:rp_data -> router_018:sink_data
	wire         to_hw_sig_s1_agent_rp_ready;                                             // router_018:sink_ready -> to_hw_sig_s1_agent:rp_ready
	wire         to_hw_sig_s1_agent_rp_startofpacket;                                     // to_hw_sig_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         to_hw_sig_s1_agent_rp_endofpacket;                                       // to_hw_sig_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                    // router_018:src_valid -> rsp_demux_017:sink_valid
	wire  [86:0] router_018_src_data;                                                     // router_018:src_data -> rsp_demux_017:sink_data
	wire         router_018_src_ready;                                                    // rsp_demux_017:sink_ready -> router_018:src_ready
	wire  [18:0] router_018_src_channel;                                                  // router_018:src_channel -> rsp_demux_017:sink_channel
	wire         router_018_src_startofpacket;                                            // router_018:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         router_018_src_endofpacket;                                              // router_018:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         to_hw_port_s1_agent_rp_valid;                                            // to_hw_port_s1_agent:rp_valid -> router_019:sink_valid
	wire  [86:0] to_hw_port_s1_agent_rp_data;                                             // to_hw_port_s1_agent:rp_data -> router_019:sink_data
	wire         to_hw_port_s1_agent_rp_ready;                                            // router_019:sink_ready -> to_hw_port_s1_agent:rp_ready
	wire         to_hw_port_s1_agent_rp_startofpacket;                                    // to_hw_port_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         to_hw_port_s1_agent_rp_endofpacket;                                      // to_hw_port_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         router_019_src_valid;                                                    // router_019:src_valid -> rsp_demux_018:sink_valid
	wire  [86:0] router_019_src_data;                                                     // router_019:src_data -> rsp_demux_018:sink_data
	wire         router_019_src_ready;                                                    // rsp_demux_018:sink_ready -> router_019:src_ready
	wire  [18:0] router_019_src_channel;                                                  // router_019:src_channel -> rsp_demux_018:sink_channel
	wire         router_019_src_startofpacket;                                            // router_019:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire         router_019_src_endofpacket;                                              // router_019:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         router_src_valid;                                                        // router:src_valid -> clock_crossing_io_m0_limiter:cmd_sink_valid
	wire  [86:0] router_src_data;                                                         // router:src_data -> clock_crossing_io_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                        // clock_crossing_io_m0_limiter:cmd_sink_ready -> router:src_ready
	wire  [18:0] router_src_channel;                                                      // router:src_channel -> clock_crossing_io_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                // router:src_startofpacket -> clock_crossing_io_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                  // router:src_endofpacket -> clock_crossing_io_m0_limiter:cmd_sink_endofpacket
	wire  [86:0] clock_crossing_io_m0_limiter_cmd_src_data;                               // clock_crossing_io_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         clock_crossing_io_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> clock_crossing_io_m0_limiter:cmd_src_ready
	wire  [18:0] clock_crossing_io_m0_limiter_cmd_src_channel;                            // clock_crossing_io_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         clock_crossing_io_m0_limiter_cmd_src_startofpacket;                      // clock_crossing_io_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         clock_crossing_io_m0_limiter_cmd_src_endofpacket;                        // clock_crossing_io_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> clock_crossing_io_m0_limiter:rsp_sink_valid
	wire  [86:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> clock_crossing_io_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                       // clock_crossing_io_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [18:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> clock_crossing_io_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> clock_crossing_io_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> clock_crossing_io_m0_limiter:rsp_sink_endofpacket
	wire         clock_crossing_io_m0_limiter_rsp_src_valid;                              // clock_crossing_io_m0_limiter:rsp_src_valid -> clock_crossing_io_m0_agent:rp_valid
	wire  [86:0] clock_crossing_io_m0_limiter_rsp_src_data;                               // clock_crossing_io_m0_limiter:rsp_src_data -> clock_crossing_io_m0_agent:rp_data
	wire         clock_crossing_io_m0_limiter_rsp_src_ready;                              // clock_crossing_io_m0_agent:rp_ready -> clock_crossing_io_m0_limiter:rsp_src_ready
	wire  [18:0] clock_crossing_io_m0_limiter_rsp_src_channel;                            // clock_crossing_io_m0_limiter:rsp_src_channel -> clock_crossing_io_m0_agent:rp_channel
	wire         clock_crossing_io_m0_limiter_rsp_src_startofpacket;                      // clock_crossing_io_m0_limiter:rsp_src_startofpacket -> clock_crossing_io_m0_agent:rp_startofpacket
	wire         clock_crossing_io_m0_limiter_rsp_src_endofpacket;                        // clock_crossing_io_m0_limiter:rsp_src_endofpacket -> clock_crossing_io_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> crosser:in_valid
	wire  [86:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> crosser:in_data
	wire         cmd_demux_src0_ready;                                                    // crosser:in_ready -> cmd_demux:src0_ready
	wire  [18:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                       // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [86:0] crosser_out_data;                                                        // crosser:out_data -> cmd_mux:sink0_data
	wire         crosser_out_ready;                                                       // cmd_mux:sink0_ready -> crosser:out_ready
	wire  [18:0] crosser_out_channel;                                                     // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_startofpacket;                                               // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                 // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                    // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [86:0] cmd_demux_src1_data;                                                     // cmd_demux:src1_data -> crosser_001:in_data
	wire         cmd_demux_src1_ready;                                                    // crosser_001:in_ready -> cmd_demux:src1_ready
	wire  [18:0] cmd_demux_src1_channel;                                                  // cmd_demux:src1_channel -> crosser_001:in_channel
	wire         cmd_demux_src1_startofpacket;                                            // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire         cmd_demux_src1_endofpacket;                                              // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                   // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [86:0] crosser_001_out_data;                                                    // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire         crosser_001_out_ready;                                                   // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire  [18:0] crosser_001_out_channel;                                                 // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire         crosser_001_out_startofpacket;                                           // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                             // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                    // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [86:0] cmd_demux_src2_data;                                                     // cmd_demux:src2_data -> crosser_002:in_data
	wire         cmd_demux_src2_ready;                                                    // crosser_002:in_ready -> cmd_demux:src2_ready
	wire  [18:0] cmd_demux_src2_channel;                                                  // cmd_demux:src2_channel -> crosser_002:in_channel
	wire         cmd_demux_src2_startofpacket;                                            // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire         cmd_demux_src2_endofpacket;                                              // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire         crosser_002_out_valid;                                                   // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [86:0] crosser_002_out_data;                                                    // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire         crosser_002_out_ready;                                                   // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire  [18:0] crosser_002_out_channel;                                                 // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire         crosser_002_out_startofpacket;                                           // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         crosser_002_out_endofpacket;                                             // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                    // cmd_demux:src3_valid -> crosser_003:in_valid
	wire  [86:0] cmd_demux_src3_data;                                                     // cmd_demux:src3_data -> crosser_003:in_data
	wire         cmd_demux_src3_ready;                                                    // crosser_003:in_ready -> cmd_demux:src3_ready
	wire  [18:0] cmd_demux_src3_channel;                                                  // cmd_demux:src3_channel -> crosser_003:in_channel
	wire         cmd_demux_src3_startofpacket;                                            // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire         cmd_demux_src3_endofpacket;                                              // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire         crosser_003_out_valid;                                                   // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [86:0] crosser_003_out_data;                                                    // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire         crosser_003_out_ready;                                                   // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire  [18:0] crosser_003_out_channel;                                                 // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire         crosser_003_out_startofpacket;                                           // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         crosser_003_out_endofpacket;                                             // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                    // cmd_demux:src4_valid -> crosser_004:in_valid
	wire  [86:0] cmd_demux_src4_data;                                                     // cmd_demux:src4_data -> crosser_004:in_data
	wire         cmd_demux_src4_ready;                                                    // crosser_004:in_ready -> cmd_demux:src4_ready
	wire  [18:0] cmd_demux_src4_channel;                                                  // cmd_demux:src4_channel -> crosser_004:in_channel
	wire         cmd_demux_src4_startofpacket;                                            // cmd_demux:src4_startofpacket -> crosser_004:in_startofpacket
	wire         cmd_demux_src4_endofpacket;                                              // cmd_demux:src4_endofpacket -> crosser_004:in_endofpacket
	wire         crosser_004_out_valid;                                                   // crosser_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [86:0] crosser_004_out_data;                                                    // crosser_004:out_data -> cmd_mux_004:sink0_data
	wire         crosser_004_out_ready;                                                   // cmd_mux_004:sink0_ready -> crosser_004:out_ready
	wire  [18:0] crosser_004_out_channel;                                                 // crosser_004:out_channel -> cmd_mux_004:sink0_channel
	wire         crosser_004_out_startofpacket;                                           // crosser_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         crosser_004_out_endofpacket;                                             // crosser_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                    // cmd_demux:src5_valid -> crosser_005:in_valid
	wire  [86:0] cmd_demux_src5_data;                                                     // cmd_demux:src5_data -> crosser_005:in_data
	wire         cmd_demux_src5_ready;                                                    // crosser_005:in_ready -> cmd_demux:src5_ready
	wire  [18:0] cmd_demux_src5_channel;                                                  // cmd_demux:src5_channel -> crosser_005:in_channel
	wire         cmd_demux_src5_startofpacket;                                            // cmd_demux:src5_startofpacket -> crosser_005:in_startofpacket
	wire         cmd_demux_src5_endofpacket;                                              // cmd_demux:src5_endofpacket -> crosser_005:in_endofpacket
	wire         crosser_005_out_valid;                                                   // crosser_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [86:0] crosser_005_out_data;                                                    // crosser_005:out_data -> cmd_mux_005:sink0_data
	wire         crosser_005_out_ready;                                                   // cmd_mux_005:sink0_ready -> crosser_005:out_ready
	wire  [18:0] crosser_005_out_channel;                                                 // crosser_005:out_channel -> cmd_mux_005:sink0_channel
	wire         crosser_005_out_startofpacket;                                           // crosser_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         crosser_005_out_endofpacket;                                             // crosser_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                    // cmd_demux:src6_valid -> crosser_006:in_valid
	wire  [86:0] cmd_demux_src6_data;                                                     // cmd_demux:src6_data -> crosser_006:in_data
	wire         cmd_demux_src6_ready;                                                    // crosser_006:in_ready -> cmd_demux:src6_ready
	wire  [18:0] cmd_demux_src6_channel;                                                  // cmd_demux:src6_channel -> crosser_006:in_channel
	wire         cmd_demux_src6_startofpacket;                                            // cmd_demux:src6_startofpacket -> crosser_006:in_startofpacket
	wire         cmd_demux_src6_endofpacket;                                              // cmd_demux:src6_endofpacket -> crosser_006:in_endofpacket
	wire         crosser_006_out_valid;                                                   // crosser_006:out_valid -> cmd_mux_006:sink0_valid
	wire  [86:0] crosser_006_out_data;                                                    // crosser_006:out_data -> cmd_mux_006:sink0_data
	wire         crosser_006_out_ready;                                                   // cmd_mux_006:sink0_ready -> crosser_006:out_ready
	wire  [18:0] crosser_006_out_channel;                                                 // crosser_006:out_channel -> cmd_mux_006:sink0_channel
	wire         crosser_006_out_startofpacket;                                           // crosser_006:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         crosser_006_out_endofpacket;                                             // crosser_006:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                    // cmd_demux:src7_valid -> crosser_007:in_valid
	wire  [86:0] cmd_demux_src7_data;                                                     // cmd_demux:src7_data -> crosser_007:in_data
	wire         cmd_demux_src7_ready;                                                    // crosser_007:in_ready -> cmd_demux:src7_ready
	wire  [18:0] cmd_demux_src7_channel;                                                  // cmd_demux:src7_channel -> crosser_007:in_channel
	wire         cmd_demux_src7_startofpacket;                                            // cmd_demux:src7_startofpacket -> crosser_007:in_startofpacket
	wire         cmd_demux_src7_endofpacket;                                              // cmd_demux:src7_endofpacket -> crosser_007:in_endofpacket
	wire         crosser_007_out_valid;                                                   // crosser_007:out_valid -> cmd_mux_007:sink0_valid
	wire  [86:0] crosser_007_out_data;                                                    // crosser_007:out_data -> cmd_mux_007:sink0_data
	wire         crosser_007_out_ready;                                                   // cmd_mux_007:sink0_ready -> crosser_007:out_ready
	wire  [18:0] crosser_007_out_channel;                                                 // crosser_007:out_channel -> cmd_mux_007:sink0_channel
	wire         crosser_007_out_startofpacket;                                           // crosser_007:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         crosser_007_out_endofpacket;                                             // crosser_007:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                    // cmd_demux:src8_valid -> crosser_008:in_valid
	wire  [86:0] cmd_demux_src8_data;                                                     // cmd_demux:src8_data -> crosser_008:in_data
	wire         cmd_demux_src8_ready;                                                    // crosser_008:in_ready -> cmd_demux:src8_ready
	wire  [18:0] cmd_demux_src8_channel;                                                  // cmd_demux:src8_channel -> crosser_008:in_channel
	wire         cmd_demux_src8_startofpacket;                                            // cmd_demux:src8_startofpacket -> crosser_008:in_startofpacket
	wire         cmd_demux_src8_endofpacket;                                              // cmd_demux:src8_endofpacket -> crosser_008:in_endofpacket
	wire         crosser_008_out_valid;                                                   // crosser_008:out_valid -> cmd_mux_008:sink0_valid
	wire  [86:0] crosser_008_out_data;                                                    // crosser_008:out_data -> cmd_mux_008:sink0_data
	wire         crosser_008_out_ready;                                                   // cmd_mux_008:sink0_ready -> crosser_008:out_ready
	wire  [18:0] crosser_008_out_channel;                                                 // crosser_008:out_channel -> cmd_mux_008:sink0_channel
	wire         crosser_008_out_startofpacket;                                           // crosser_008:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         crosser_008_out_endofpacket;                                             // crosser_008:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                    // cmd_demux:src9_valid -> crosser_009:in_valid
	wire  [86:0] cmd_demux_src9_data;                                                     // cmd_demux:src9_data -> crosser_009:in_data
	wire         cmd_demux_src9_ready;                                                    // crosser_009:in_ready -> cmd_demux:src9_ready
	wire  [18:0] cmd_demux_src9_channel;                                                  // cmd_demux:src9_channel -> crosser_009:in_channel
	wire         cmd_demux_src9_startofpacket;                                            // cmd_demux:src9_startofpacket -> crosser_009:in_startofpacket
	wire         cmd_demux_src9_endofpacket;                                              // cmd_demux:src9_endofpacket -> crosser_009:in_endofpacket
	wire         crosser_009_out_valid;                                                   // crosser_009:out_valid -> cmd_mux_009:sink0_valid
	wire  [86:0] crosser_009_out_data;                                                    // crosser_009:out_data -> cmd_mux_009:sink0_data
	wire         crosser_009_out_ready;                                                   // cmd_mux_009:sink0_ready -> crosser_009:out_ready
	wire  [18:0] crosser_009_out_channel;                                                 // crosser_009:out_channel -> cmd_mux_009:sink0_channel
	wire         crosser_009_out_startofpacket;                                           // crosser_009:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         crosser_009_out_endofpacket;                                             // crosser_009:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                   // cmd_demux:src10_valid -> crosser_010:in_valid
	wire  [86:0] cmd_demux_src10_data;                                                    // cmd_demux:src10_data -> crosser_010:in_data
	wire         cmd_demux_src10_ready;                                                   // crosser_010:in_ready -> cmd_demux:src10_ready
	wire  [18:0] cmd_demux_src10_channel;                                                 // cmd_demux:src10_channel -> crosser_010:in_channel
	wire         cmd_demux_src10_startofpacket;                                           // cmd_demux:src10_startofpacket -> crosser_010:in_startofpacket
	wire         cmd_demux_src10_endofpacket;                                             // cmd_demux:src10_endofpacket -> crosser_010:in_endofpacket
	wire         crosser_010_out_valid;                                                   // crosser_010:out_valid -> cmd_mux_010:sink0_valid
	wire  [86:0] crosser_010_out_data;                                                    // crosser_010:out_data -> cmd_mux_010:sink0_data
	wire         crosser_010_out_ready;                                                   // cmd_mux_010:sink0_ready -> crosser_010:out_ready
	wire  [18:0] crosser_010_out_channel;                                                 // crosser_010:out_channel -> cmd_mux_010:sink0_channel
	wire         crosser_010_out_startofpacket;                                           // crosser_010:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         crosser_010_out_endofpacket;                                             // crosser_010:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                   // cmd_demux:src11_valid -> crosser_011:in_valid
	wire  [86:0] cmd_demux_src11_data;                                                    // cmd_demux:src11_data -> crosser_011:in_data
	wire         cmd_demux_src11_ready;                                                   // crosser_011:in_ready -> cmd_demux:src11_ready
	wire  [18:0] cmd_demux_src11_channel;                                                 // cmd_demux:src11_channel -> crosser_011:in_channel
	wire         cmd_demux_src11_startofpacket;                                           // cmd_demux:src11_startofpacket -> crosser_011:in_startofpacket
	wire         cmd_demux_src11_endofpacket;                                             // cmd_demux:src11_endofpacket -> crosser_011:in_endofpacket
	wire         crosser_011_out_valid;                                                   // crosser_011:out_valid -> cmd_mux_011:sink0_valid
	wire  [86:0] crosser_011_out_data;                                                    // crosser_011:out_data -> cmd_mux_011:sink0_data
	wire         crosser_011_out_ready;                                                   // cmd_mux_011:sink0_ready -> crosser_011:out_ready
	wire  [18:0] crosser_011_out_channel;                                                 // crosser_011:out_channel -> cmd_mux_011:sink0_channel
	wire         crosser_011_out_startofpacket;                                           // crosser_011:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         crosser_011_out_endofpacket;                                             // crosser_011:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                   // cmd_demux:src12_valid -> crosser_012:in_valid
	wire  [86:0] cmd_demux_src12_data;                                                    // cmd_demux:src12_data -> crosser_012:in_data
	wire         cmd_demux_src12_ready;                                                   // crosser_012:in_ready -> cmd_demux:src12_ready
	wire  [18:0] cmd_demux_src12_channel;                                                 // cmd_demux:src12_channel -> crosser_012:in_channel
	wire         cmd_demux_src12_startofpacket;                                           // cmd_demux:src12_startofpacket -> crosser_012:in_startofpacket
	wire         cmd_demux_src12_endofpacket;                                             // cmd_demux:src12_endofpacket -> crosser_012:in_endofpacket
	wire         crosser_012_out_valid;                                                   // crosser_012:out_valid -> cmd_mux_012:sink0_valid
	wire  [86:0] crosser_012_out_data;                                                    // crosser_012:out_data -> cmd_mux_012:sink0_data
	wire         crosser_012_out_ready;                                                   // cmd_mux_012:sink0_ready -> crosser_012:out_ready
	wire  [18:0] crosser_012_out_channel;                                                 // crosser_012:out_channel -> cmd_mux_012:sink0_channel
	wire         crosser_012_out_startofpacket;                                           // crosser_012:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         crosser_012_out_endofpacket;                                             // crosser_012:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                   // cmd_demux:src13_valid -> crosser_013:in_valid
	wire  [86:0] cmd_demux_src13_data;                                                    // cmd_demux:src13_data -> crosser_013:in_data
	wire         cmd_demux_src13_ready;                                                   // crosser_013:in_ready -> cmd_demux:src13_ready
	wire  [18:0] cmd_demux_src13_channel;                                                 // cmd_demux:src13_channel -> crosser_013:in_channel
	wire         cmd_demux_src13_startofpacket;                                           // cmd_demux:src13_startofpacket -> crosser_013:in_startofpacket
	wire         cmd_demux_src13_endofpacket;                                             // cmd_demux:src13_endofpacket -> crosser_013:in_endofpacket
	wire         crosser_013_out_valid;                                                   // crosser_013:out_valid -> cmd_mux_013:sink0_valid
	wire  [86:0] crosser_013_out_data;                                                    // crosser_013:out_data -> cmd_mux_013:sink0_data
	wire         crosser_013_out_ready;                                                   // cmd_mux_013:sink0_ready -> crosser_013:out_ready
	wire  [18:0] crosser_013_out_channel;                                                 // crosser_013:out_channel -> cmd_mux_013:sink0_channel
	wire         crosser_013_out_startofpacket;                                           // crosser_013:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         crosser_013_out_endofpacket;                                             // crosser_013:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                   // cmd_demux:src14_valid -> crosser_014:in_valid
	wire  [86:0] cmd_demux_src14_data;                                                    // cmd_demux:src14_data -> crosser_014:in_data
	wire         cmd_demux_src14_ready;                                                   // crosser_014:in_ready -> cmd_demux:src14_ready
	wire  [18:0] cmd_demux_src14_channel;                                                 // cmd_demux:src14_channel -> crosser_014:in_channel
	wire         cmd_demux_src14_startofpacket;                                           // cmd_demux:src14_startofpacket -> crosser_014:in_startofpacket
	wire         cmd_demux_src14_endofpacket;                                             // cmd_demux:src14_endofpacket -> crosser_014:in_endofpacket
	wire         crosser_014_out_valid;                                                   // crosser_014:out_valid -> cmd_mux_014:sink0_valid
	wire  [86:0] crosser_014_out_data;                                                    // crosser_014:out_data -> cmd_mux_014:sink0_data
	wire         crosser_014_out_ready;                                                   // cmd_mux_014:sink0_ready -> crosser_014:out_ready
	wire  [18:0] crosser_014_out_channel;                                                 // crosser_014:out_channel -> cmd_mux_014:sink0_channel
	wire         crosser_014_out_startofpacket;                                           // crosser_014:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         crosser_014_out_endofpacket;                                             // crosser_014:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                   // cmd_demux:src15_valid -> crosser_015:in_valid
	wire  [86:0] cmd_demux_src15_data;                                                    // cmd_demux:src15_data -> crosser_015:in_data
	wire         cmd_demux_src15_ready;                                                   // crosser_015:in_ready -> cmd_demux:src15_ready
	wire  [18:0] cmd_demux_src15_channel;                                                 // cmd_demux:src15_channel -> crosser_015:in_channel
	wire         cmd_demux_src15_startofpacket;                                           // cmd_demux:src15_startofpacket -> crosser_015:in_startofpacket
	wire         cmd_demux_src15_endofpacket;                                             // cmd_demux:src15_endofpacket -> crosser_015:in_endofpacket
	wire         crosser_015_out_valid;                                                   // crosser_015:out_valid -> cmd_mux_015:sink0_valid
	wire  [86:0] crosser_015_out_data;                                                    // crosser_015:out_data -> cmd_mux_015:sink0_data
	wire         crosser_015_out_ready;                                                   // cmd_mux_015:sink0_ready -> crosser_015:out_ready
	wire  [18:0] crosser_015_out_channel;                                                 // crosser_015:out_channel -> cmd_mux_015:sink0_channel
	wire         crosser_015_out_startofpacket;                                           // crosser_015:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         crosser_015_out_endofpacket;                                             // crosser_015:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                   // cmd_demux:src16_valid -> crosser_016:in_valid
	wire  [86:0] cmd_demux_src16_data;                                                    // cmd_demux:src16_data -> crosser_016:in_data
	wire         cmd_demux_src16_ready;                                                   // crosser_016:in_ready -> cmd_demux:src16_ready
	wire  [18:0] cmd_demux_src16_channel;                                                 // cmd_demux:src16_channel -> crosser_016:in_channel
	wire         cmd_demux_src16_startofpacket;                                           // cmd_demux:src16_startofpacket -> crosser_016:in_startofpacket
	wire         cmd_demux_src16_endofpacket;                                             // cmd_demux:src16_endofpacket -> crosser_016:in_endofpacket
	wire         crosser_016_out_valid;                                                   // crosser_016:out_valid -> cmd_mux_016:sink0_valid
	wire  [86:0] crosser_016_out_data;                                                    // crosser_016:out_data -> cmd_mux_016:sink0_data
	wire         crosser_016_out_ready;                                                   // cmd_mux_016:sink0_ready -> crosser_016:out_ready
	wire  [18:0] crosser_016_out_channel;                                                 // crosser_016:out_channel -> cmd_mux_016:sink0_channel
	wire         crosser_016_out_startofpacket;                                           // crosser_016:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         crosser_016_out_endofpacket;                                             // crosser_016:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                                   // cmd_demux:src17_valid -> crosser_017:in_valid
	wire  [86:0] cmd_demux_src17_data;                                                    // cmd_demux:src17_data -> crosser_017:in_data
	wire         cmd_demux_src17_ready;                                                   // crosser_017:in_ready -> cmd_demux:src17_ready
	wire  [18:0] cmd_demux_src17_channel;                                                 // cmd_demux:src17_channel -> crosser_017:in_channel
	wire         cmd_demux_src17_startofpacket;                                           // cmd_demux:src17_startofpacket -> crosser_017:in_startofpacket
	wire         cmd_demux_src17_endofpacket;                                             // cmd_demux:src17_endofpacket -> crosser_017:in_endofpacket
	wire         crosser_017_out_valid;                                                   // crosser_017:out_valid -> cmd_mux_017:sink0_valid
	wire  [86:0] crosser_017_out_data;                                                    // crosser_017:out_data -> cmd_mux_017:sink0_data
	wire         crosser_017_out_ready;                                                   // cmd_mux_017:sink0_ready -> crosser_017:out_ready
	wire  [18:0] crosser_017_out_channel;                                                 // crosser_017:out_channel -> cmd_mux_017:sink0_channel
	wire         crosser_017_out_startofpacket;                                           // crosser_017:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         crosser_017_out_endofpacket;                                             // crosser_017:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_src18_valid;                                                   // cmd_demux:src18_valid -> crosser_018:in_valid
	wire  [86:0] cmd_demux_src18_data;                                                    // cmd_demux:src18_data -> crosser_018:in_data
	wire         cmd_demux_src18_ready;                                                   // crosser_018:in_ready -> cmd_demux:src18_ready
	wire  [18:0] cmd_demux_src18_channel;                                                 // cmd_demux:src18_channel -> crosser_018:in_channel
	wire         cmd_demux_src18_startofpacket;                                           // cmd_demux:src18_startofpacket -> crosser_018:in_startofpacket
	wire         cmd_demux_src18_endofpacket;                                             // cmd_demux:src18_endofpacket -> crosser_018:in_endofpacket
	wire         crosser_018_out_valid;                                                   // crosser_018:out_valid -> cmd_mux_018:sink0_valid
	wire  [86:0] crosser_018_out_data;                                                    // crosser_018:out_data -> cmd_mux_018:sink0_data
	wire         crosser_018_out_ready;                                                   // cmd_mux_018:sink0_ready -> crosser_018:out_ready
	wire  [18:0] crosser_018_out_channel;                                                 // crosser_018:out_channel -> cmd_mux_018:sink0_channel
	wire         crosser_018_out_startofpacket;                                           // crosser_018:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire         crosser_018_out_endofpacket;                                             // crosser_018:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> crosser_019:in_valid
	wire  [86:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> crosser_019:in_data
	wire         rsp_demux_src0_ready;                                                    // crosser_019:in_ready -> rsp_demux:src0_ready
	wire  [18:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> crosser_019:in_channel
	wire         rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> crosser_019:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> crosser_019:in_endofpacket
	wire         crosser_019_out_valid;                                                   // crosser_019:out_valid -> rsp_mux:sink0_valid
	wire  [86:0] crosser_019_out_data;                                                    // crosser_019:out_data -> rsp_mux:sink0_data
	wire         crosser_019_out_ready;                                                   // rsp_mux:sink0_ready -> crosser_019:out_ready
	wire  [18:0] crosser_019_out_channel;                                                 // crosser_019:out_channel -> rsp_mux:sink0_channel
	wire         crosser_019_out_startofpacket;                                           // crosser_019:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         crosser_019_out_endofpacket;                                             // crosser_019:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> crosser_020:in_valid
	wire  [86:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> crosser_020:in_data
	wire         rsp_demux_001_src0_ready;                                                // crosser_020:in_ready -> rsp_demux_001:src0_ready
	wire  [18:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> crosser_020:in_channel
	wire         rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> crosser_020:in_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> crosser_020:in_endofpacket
	wire         crosser_020_out_valid;                                                   // crosser_020:out_valid -> rsp_mux:sink1_valid
	wire  [86:0] crosser_020_out_data;                                                    // crosser_020:out_data -> rsp_mux:sink1_data
	wire         crosser_020_out_ready;                                                   // rsp_mux:sink1_ready -> crosser_020:out_ready
	wire  [18:0] crosser_020_out_channel;                                                 // crosser_020:out_channel -> rsp_mux:sink1_channel
	wire         crosser_020_out_startofpacket;                                           // crosser_020:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire         crosser_020_out_endofpacket;                                             // crosser_020:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                // rsp_demux_002:src0_valid -> crosser_021:in_valid
	wire  [86:0] rsp_demux_002_src0_data;                                                 // rsp_demux_002:src0_data -> crosser_021:in_data
	wire         rsp_demux_002_src0_ready;                                                // crosser_021:in_ready -> rsp_demux_002:src0_ready
	wire  [18:0] rsp_demux_002_src0_channel;                                              // rsp_demux_002:src0_channel -> crosser_021:in_channel
	wire         rsp_demux_002_src0_startofpacket;                                        // rsp_demux_002:src0_startofpacket -> crosser_021:in_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                          // rsp_demux_002:src0_endofpacket -> crosser_021:in_endofpacket
	wire         crosser_021_out_valid;                                                   // crosser_021:out_valid -> rsp_mux:sink2_valid
	wire  [86:0] crosser_021_out_data;                                                    // crosser_021:out_data -> rsp_mux:sink2_data
	wire         crosser_021_out_ready;                                                   // rsp_mux:sink2_ready -> crosser_021:out_ready
	wire  [18:0] crosser_021_out_channel;                                                 // crosser_021:out_channel -> rsp_mux:sink2_channel
	wire         crosser_021_out_startofpacket;                                           // crosser_021:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire         crosser_021_out_endofpacket;                                             // crosser_021:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                // rsp_demux_003:src0_valid -> crosser_022:in_valid
	wire  [86:0] rsp_demux_003_src0_data;                                                 // rsp_demux_003:src0_data -> crosser_022:in_data
	wire         rsp_demux_003_src0_ready;                                                // crosser_022:in_ready -> rsp_demux_003:src0_ready
	wire  [18:0] rsp_demux_003_src0_channel;                                              // rsp_demux_003:src0_channel -> crosser_022:in_channel
	wire         rsp_demux_003_src0_startofpacket;                                        // rsp_demux_003:src0_startofpacket -> crosser_022:in_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                          // rsp_demux_003:src0_endofpacket -> crosser_022:in_endofpacket
	wire         crosser_022_out_valid;                                                   // crosser_022:out_valid -> rsp_mux:sink3_valid
	wire  [86:0] crosser_022_out_data;                                                    // crosser_022:out_data -> rsp_mux:sink3_data
	wire         crosser_022_out_ready;                                                   // rsp_mux:sink3_ready -> crosser_022:out_ready
	wire  [18:0] crosser_022_out_channel;                                                 // crosser_022:out_channel -> rsp_mux:sink3_channel
	wire         crosser_022_out_startofpacket;                                           // crosser_022:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire         crosser_022_out_endofpacket;                                             // crosser_022:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                // rsp_demux_004:src0_valid -> crosser_023:in_valid
	wire  [86:0] rsp_demux_004_src0_data;                                                 // rsp_demux_004:src0_data -> crosser_023:in_data
	wire         rsp_demux_004_src0_ready;                                                // crosser_023:in_ready -> rsp_demux_004:src0_ready
	wire  [18:0] rsp_demux_004_src0_channel;                                              // rsp_demux_004:src0_channel -> crosser_023:in_channel
	wire         rsp_demux_004_src0_startofpacket;                                        // rsp_demux_004:src0_startofpacket -> crosser_023:in_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                          // rsp_demux_004:src0_endofpacket -> crosser_023:in_endofpacket
	wire         crosser_023_out_valid;                                                   // crosser_023:out_valid -> rsp_mux:sink4_valid
	wire  [86:0] crosser_023_out_data;                                                    // crosser_023:out_data -> rsp_mux:sink4_data
	wire         crosser_023_out_ready;                                                   // rsp_mux:sink4_ready -> crosser_023:out_ready
	wire  [18:0] crosser_023_out_channel;                                                 // crosser_023:out_channel -> rsp_mux:sink4_channel
	wire         crosser_023_out_startofpacket;                                           // crosser_023:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire         crosser_023_out_endofpacket;                                             // crosser_023:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                // rsp_demux_005:src0_valid -> crosser_024:in_valid
	wire  [86:0] rsp_demux_005_src0_data;                                                 // rsp_demux_005:src0_data -> crosser_024:in_data
	wire         rsp_demux_005_src0_ready;                                                // crosser_024:in_ready -> rsp_demux_005:src0_ready
	wire  [18:0] rsp_demux_005_src0_channel;                                              // rsp_demux_005:src0_channel -> crosser_024:in_channel
	wire         rsp_demux_005_src0_startofpacket;                                        // rsp_demux_005:src0_startofpacket -> crosser_024:in_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                          // rsp_demux_005:src0_endofpacket -> crosser_024:in_endofpacket
	wire         crosser_024_out_valid;                                                   // crosser_024:out_valid -> rsp_mux:sink5_valid
	wire  [86:0] crosser_024_out_data;                                                    // crosser_024:out_data -> rsp_mux:sink5_data
	wire         crosser_024_out_ready;                                                   // rsp_mux:sink5_ready -> crosser_024:out_ready
	wire  [18:0] crosser_024_out_channel;                                                 // crosser_024:out_channel -> rsp_mux:sink5_channel
	wire         crosser_024_out_startofpacket;                                           // crosser_024:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire         crosser_024_out_endofpacket;                                             // crosser_024:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                // rsp_demux_006:src0_valid -> crosser_025:in_valid
	wire  [86:0] rsp_demux_006_src0_data;                                                 // rsp_demux_006:src0_data -> crosser_025:in_data
	wire         rsp_demux_006_src0_ready;                                                // crosser_025:in_ready -> rsp_demux_006:src0_ready
	wire  [18:0] rsp_demux_006_src0_channel;                                              // rsp_demux_006:src0_channel -> crosser_025:in_channel
	wire         rsp_demux_006_src0_startofpacket;                                        // rsp_demux_006:src0_startofpacket -> crosser_025:in_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                          // rsp_demux_006:src0_endofpacket -> crosser_025:in_endofpacket
	wire         crosser_025_out_valid;                                                   // crosser_025:out_valid -> rsp_mux:sink6_valid
	wire  [86:0] crosser_025_out_data;                                                    // crosser_025:out_data -> rsp_mux:sink6_data
	wire         crosser_025_out_ready;                                                   // rsp_mux:sink6_ready -> crosser_025:out_ready
	wire  [18:0] crosser_025_out_channel;                                                 // crosser_025:out_channel -> rsp_mux:sink6_channel
	wire         crosser_025_out_startofpacket;                                           // crosser_025:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire         crosser_025_out_endofpacket;                                             // crosser_025:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                // rsp_demux_007:src0_valid -> crosser_026:in_valid
	wire  [86:0] rsp_demux_007_src0_data;                                                 // rsp_demux_007:src0_data -> crosser_026:in_data
	wire         rsp_demux_007_src0_ready;                                                // crosser_026:in_ready -> rsp_demux_007:src0_ready
	wire  [18:0] rsp_demux_007_src0_channel;                                              // rsp_demux_007:src0_channel -> crosser_026:in_channel
	wire         rsp_demux_007_src0_startofpacket;                                        // rsp_demux_007:src0_startofpacket -> crosser_026:in_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                          // rsp_demux_007:src0_endofpacket -> crosser_026:in_endofpacket
	wire         crosser_026_out_valid;                                                   // crosser_026:out_valid -> rsp_mux:sink7_valid
	wire  [86:0] crosser_026_out_data;                                                    // crosser_026:out_data -> rsp_mux:sink7_data
	wire         crosser_026_out_ready;                                                   // rsp_mux:sink7_ready -> crosser_026:out_ready
	wire  [18:0] crosser_026_out_channel;                                                 // crosser_026:out_channel -> rsp_mux:sink7_channel
	wire         crosser_026_out_startofpacket;                                           // crosser_026:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire         crosser_026_out_endofpacket;                                             // crosser_026:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                // rsp_demux_008:src0_valid -> crosser_027:in_valid
	wire  [86:0] rsp_demux_008_src0_data;                                                 // rsp_demux_008:src0_data -> crosser_027:in_data
	wire         rsp_demux_008_src0_ready;                                                // crosser_027:in_ready -> rsp_demux_008:src0_ready
	wire  [18:0] rsp_demux_008_src0_channel;                                              // rsp_demux_008:src0_channel -> crosser_027:in_channel
	wire         rsp_demux_008_src0_startofpacket;                                        // rsp_demux_008:src0_startofpacket -> crosser_027:in_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                          // rsp_demux_008:src0_endofpacket -> crosser_027:in_endofpacket
	wire         crosser_027_out_valid;                                                   // crosser_027:out_valid -> rsp_mux:sink8_valid
	wire  [86:0] crosser_027_out_data;                                                    // crosser_027:out_data -> rsp_mux:sink8_data
	wire         crosser_027_out_ready;                                                   // rsp_mux:sink8_ready -> crosser_027:out_ready
	wire  [18:0] crosser_027_out_channel;                                                 // crosser_027:out_channel -> rsp_mux:sink8_channel
	wire         crosser_027_out_startofpacket;                                           // crosser_027:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire         crosser_027_out_endofpacket;                                             // crosser_027:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                // rsp_demux_009:src0_valid -> crosser_028:in_valid
	wire  [86:0] rsp_demux_009_src0_data;                                                 // rsp_demux_009:src0_data -> crosser_028:in_data
	wire         rsp_demux_009_src0_ready;                                                // crosser_028:in_ready -> rsp_demux_009:src0_ready
	wire  [18:0] rsp_demux_009_src0_channel;                                              // rsp_demux_009:src0_channel -> crosser_028:in_channel
	wire         rsp_demux_009_src0_startofpacket;                                        // rsp_demux_009:src0_startofpacket -> crosser_028:in_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                          // rsp_demux_009:src0_endofpacket -> crosser_028:in_endofpacket
	wire         crosser_028_out_valid;                                                   // crosser_028:out_valid -> rsp_mux:sink9_valid
	wire  [86:0] crosser_028_out_data;                                                    // crosser_028:out_data -> rsp_mux:sink9_data
	wire         crosser_028_out_ready;                                                   // rsp_mux:sink9_ready -> crosser_028:out_ready
	wire  [18:0] crosser_028_out_channel;                                                 // crosser_028:out_channel -> rsp_mux:sink9_channel
	wire         crosser_028_out_startofpacket;                                           // crosser_028:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire         crosser_028_out_endofpacket;                                             // crosser_028:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                // rsp_demux_010:src0_valid -> crosser_029:in_valid
	wire  [86:0] rsp_demux_010_src0_data;                                                 // rsp_demux_010:src0_data -> crosser_029:in_data
	wire         rsp_demux_010_src0_ready;                                                // crosser_029:in_ready -> rsp_demux_010:src0_ready
	wire  [18:0] rsp_demux_010_src0_channel;                                              // rsp_demux_010:src0_channel -> crosser_029:in_channel
	wire         rsp_demux_010_src0_startofpacket;                                        // rsp_demux_010:src0_startofpacket -> crosser_029:in_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                          // rsp_demux_010:src0_endofpacket -> crosser_029:in_endofpacket
	wire         crosser_029_out_valid;                                                   // crosser_029:out_valid -> rsp_mux:sink10_valid
	wire  [86:0] crosser_029_out_data;                                                    // crosser_029:out_data -> rsp_mux:sink10_data
	wire         crosser_029_out_ready;                                                   // rsp_mux:sink10_ready -> crosser_029:out_ready
	wire  [18:0] crosser_029_out_channel;                                                 // crosser_029:out_channel -> rsp_mux:sink10_channel
	wire         crosser_029_out_startofpacket;                                           // crosser_029:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire         crosser_029_out_endofpacket;                                             // crosser_029:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                // rsp_demux_011:src0_valid -> crosser_030:in_valid
	wire  [86:0] rsp_demux_011_src0_data;                                                 // rsp_demux_011:src0_data -> crosser_030:in_data
	wire         rsp_demux_011_src0_ready;                                                // crosser_030:in_ready -> rsp_demux_011:src0_ready
	wire  [18:0] rsp_demux_011_src0_channel;                                              // rsp_demux_011:src0_channel -> crosser_030:in_channel
	wire         rsp_demux_011_src0_startofpacket;                                        // rsp_demux_011:src0_startofpacket -> crosser_030:in_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                          // rsp_demux_011:src0_endofpacket -> crosser_030:in_endofpacket
	wire         crosser_030_out_valid;                                                   // crosser_030:out_valid -> rsp_mux:sink11_valid
	wire  [86:0] crosser_030_out_data;                                                    // crosser_030:out_data -> rsp_mux:sink11_data
	wire         crosser_030_out_ready;                                                   // rsp_mux:sink11_ready -> crosser_030:out_ready
	wire  [18:0] crosser_030_out_channel;                                                 // crosser_030:out_channel -> rsp_mux:sink11_channel
	wire         crosser_030_out_startofpacket;                                           // crosser_030:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire         crosser_030_out_endofpacket;                                             // crosser_030:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                // rsp_demux_012:src0_valid -> crosser_031:in_valid
	wire  [86:0] rsp_demux_012_src0_data;                                                 // rsp_demux_012:src0_data -> crosser_031:in_data
	wire         rsp_demux_012_src0_ready;                                                // crosser_031:in_ready -> rsp_demux_012:src0_ready
	wire  [18:0] rsp_demux_012_src0_channel;                                              // rsp_demux_012:src0_channel -> crosser_031:in_channel
	wire         rsp_demux_012_src0_startofpacket;                                        // rsp_demux_012:src0_startofpacket -> crosser_031:in_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                          // rsp_demux_012:src0_endofpacket -> crosser_031:in_endofpacket
	wire         crosser_031_out_valid;                                                   // crosser_031:out_valid -> rsp_mux:sink12_valid
	wire  [86:0] crosser_031_out_data;                                                    // crosser_031:out_data -> rsp_mux:sink12_data
	wire         crosser_031_out_ready;                                                   // rsp_mux:sink12_ready -> crosser_031:out_ready
	wire  [18:0] crosser_031_out_channel;                                                 // crosser_031:out_channel -> rsp_mux:sink12_channel
	wire         crosser_031_out_startofpacket;                                           // crosser_031:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire         crosser_031_out_endofpacket;                                             // crosser_031:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                // rsp_demux_013:src0_valid -> crosser_032:in_valid
	wire  [86:0] rsp_demux_013_src0_data;                                                 // rsp_demux_013:src0_data -> crosser_032:in_data
	wire         rsp_demux_013_src0_ready;                                                // crosser_032:in_ready -> rsp_demux_013:src0_ready
	wire  [18:0] rsp_demux_013_src0_channel;                                              // rsp_demux_013:src0_channel -> crosser_032:in_channel
	wire         rsp_demux_013_src0_startofpacket;                                        // rsp_demux_013:src0_startofpacket -> crosser_032:in_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                          // rsp_demux_013:src0_endofpacket -> crosser_032:in_endofpacket
	wire         crosser_032_out_valid;                                                   // crosser_032:out_valid -> rsp_mux:sink13_valid
	wire  [86:0] crosser_032_out_data;                                                    // crosser_032:out_data -> rsp_mux:sink13_data
	wire         crosser_032_out_ready;                                                   // rsp_mux:sink13_ready -> crosser_032:out_ready
	wire  [18:0] crosser_032_out_channel;                                                 // crosser_032:out_channel -> rsp_mux:sink13_channel
	wire         crosser_032_out_startofpacket;                                           // crosser_032:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire         crosser_032_out_endofpacket;                                             // crosser_032:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                // rsp_demux_014:src0_valid -> crosser_033:in_valid
	wire  [86:0] rsp_demux_014_src0_data;                                                 // rsp_demux_014:src0_data -> crosser_033:in_data
	wire         rsp_demux_014_src0_ready;                                                // crosser_033:in_ready -> rsp_demux_014:src0_ready
	wire  [18:0] rsp_demux_014_src0_channel;                                              // rsp_demux_014:src0_channel -> crosser_033:in_channel
	wire         rsp_demux_014_src0_startofpacket;                                        // rsp_demux_014:src0_startofpacket -> crosser_033:in_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                          // rsp_demux_014:src0_endofpacket -> crosser_033:in_endofpacket
	wire         crosser_033_out_valid;                                                   // crosser_033:out_valid -> rsp_mux:sink14_valid
	wire  [86:0] crosser_033_out_data;                                                    // crosser_033:out_data -> rsp_mux:sink14_data
	wire         crosser_033_out_ready;                                                   // rsp_mux:sink14_ready -> crosser_033:out_ready
	wire  [18:0] crosser_033_out_channel;                                                 // crosser_033:out_channel -> rsp_mux:sink14_channel
	wire         crosser_033_out_startofpacket;                                           // crosser_033:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire         crosser_033_out_endofpacket;                                             // crosser_033:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                // rsp_demux_015:src0_valid -> crosser_034:in_valid
	wire  [86:0] rsp_demux_015_src0_data;                                                 // rsp_demux_015:src0_data -> crosser_034:in_data
	wire         rsp_demux_015_src0_ready;                                                // crosser_034:in_ready -> rsp_demux_015:src0_ready
	wire  [18:0] rsp_demux_015_src0_channel;                                              // rsp_demux_015:src0_channel -> crosser_034:in_channel
	wire         rsp_demux_015_src0_startofpacket;                                        // rsp_demux_015:src0_startofpacket -> crosser_034:in_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                          // rsp_demux_015:src0_endofpacket -> crosser_034:in_endofpacket
	wire         crosser_034_out_valid;                                                   // crosser_034:out_valid -> rsp_mux:sink15_valid
	wire  [86:0] crosser_034_out_data;                                                    // crosser_034:out_data -> rsp_mux:sink15_data
	wire         crosser_034_out_ready;                                                   // rsp_mux:sink15_ready -> crosser_034:out_ready
	wire  [18:0] crosser_034_out_channel;                                                 // crosser_034:out_channel -> rsp_mux:sink15_channel
	wire         crosser_034_out_startofpacket;                                           // crosser_034:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire         crosser_034_out_endofpacket;                                             // crosser_034:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                // rsp_demux_016:src0_valid -> crosser_035:in_valid
	wire  [86:0] rsp_demux_016_src0_data;                                                 // rsp_demux_016:src0_data -> crosser_035:in_data
	wire         rsp_demux_016_src0_ready;                                                // crosser_035:in_ready -> rsp_demux_016:src0_ready
	wire  [18:0] rsp_demux_016_src0_channel;                                              // rsp_demux_016:src0_channel -> crosser_035:in_channel
	wire         rsp_demux_016_src0_startofpacket;                                        // rsp_demux_016:src0_startofpacket -> crosser_035:in_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                          // rsp_demux_016:src0_endofpacket -> crosser_035:in_endofpacket
	wire         crosser_035_out_valid;                                                   // crosser_035:out_valid -> rsp_mux:sink16_valid
	wire  [86:0] crosser_035_out_data;                                                    // crosser_035:out_data -> rsp_mux:sink16_data
	wire         crosser_035_out_ready;                                                   // rsp_mux:sink16_ready -> crosser_035:out_ready
	wire  [18:0] crosser_035_out_channel;                                                 // crosser_035:out_channel -> rsp_mux:sink16_channel
	wire         crosser_035_out_startofpacket;                                           // crosser_035:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire         crosser_035_out_endofpacket;                                             // crosser_035:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                                // rsp_demux_017:src0_valid -> crosser_036:in_valid
	wire  [86:0] rsp_demux_017_src0_data;                                                 // rsp_demux_017:src0_data -> crosser_036:in_data
	wire         rsp_demux_017_src0_ready;                                                // crosser_036:in_ready -> rsp_demux_017:src0_ready
	wire  [18:0] rsp_demux_017_src0_channel;                                              // rsp_demux_017:src0_channel -> crosser_036:in_channel
	wire         rsp_demux_017_src0_startofpacket;                                        // rsp_demux_017:src0_startofpacket -> crosser_036:in_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                          // rsp_demux_017:src0_endofpacket -> crosser_036:in_endofpacket
	wire         crosser_036_out_valid;                                                   // crosser_036:out_valid -> rsp_mux:sink17_valid
	wire  [86:0] crosser_036_out_data;                                                    // crosser_036:out_data -> rsp_mux:sink17_data
	wire         crosser_036_out_ready;                                                   // rsp_mux:sink17_ready -> crosser_036:out_ready
	wire  [18:0] crosser_036_out_channel;                                                 // crosser_036:out_channel -> rsp_mux:sink17_channel
	wire         crosser_036_out_startofpacket;                                           // crosser_036:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire         crosser_036_out_endofpacket;                                             // crosser_036:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                                // rsp_demux_018:src0_valid -> crosser_037:in_valid
	wire  [86:0] rsp_demux_018_src0_data;                                                 // rsp_demux_018:src0_data -> crosser_037:in_data
	wire         rsp_demux_018_src0_ready;                                                // crosser_037:in_ready -> rsp_demux_018:src0_ready
	wire  [18:0] rsp_demux_018_src0_channel;                                              // rsp_demux_018:src0_channel -> crosser_037:in_channel
	wire         rsp_demux_018_src0_startofpacket;                                        // rsp_demux_018:src0_startofpacket -> crosser_037:in_startofpacket
	wire         rsp_demux_018_src0_endofpacket;                                          // rsp_demux_018:src0_endofpacket -> crosser_037:in_endofpacket
	wire         crosser_037_out_valid;                                                   // crosser_037:out_valid -> rsp_mux:sink18_valid
	wire  [86:0] crosser_037_out_data;                                                    // crosser_037:out_data -> rsp_mux:sink18_data
	wire         crosser_037_out_ready;                                                   // rsp_mux:sink18_ready -> crosser_037:out_ready
	wire  [18:0] crosser_037_out_channel;                                                 // crosser_037:out_channel -> rsp_mux:sink18_channel
	wire         crosser_037_out_startofpacket;                                           // crosser_037:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire         crosser_037_out_endofpacket;                                             // crosser_037:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire  [18:0] clock_crossing_io_m0_limiter_cmd_valid_data;                             // clock_crossing_io_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         lcd_control_slave_agent_rdata_fifo_out_valid;                            // lcd_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] lcd_control_slave_agent_rdata_fifo_out_data;                             // lcd_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         lcd_control_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter:in_0_ready -> lcd_control_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> lcd_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> lcd_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                           // lcd_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> lcd_control_slave_agent:rdata_fifo_sink_error
	wire         key_s1_agent_rdata_fifo_out_valid;                                       // key_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] key_s1_agent_rdata_fifo_out_data;                                        // key_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire         key_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_001:in_0_ready -> key_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_001_out_0_valid;                                       // avalon_st_adapter_001:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                        // avalon_st_adapter_001:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                       // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                       // avalon_st_adapter_001:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire         sd_clk_s1_agent_rdata_fifo_out_valid;                                    // sd_clk_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] sd_clk_s1_agent_rdata_fifo_out_data;                                     // sd_clk_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire         sd_clk_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_002:in_0_ready -> sd_clk_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_002_out_0_valid;                                       // avalon_st_adapter_002:out_0_valid -> sd_clk_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                        // avalon_st_adapter_002:out_0_data -> sd_clk_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                       // sd_clk_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                       // avalon_st_adapter_002:out_0_error -> sd_clk_s1_agent:rdata_fifo_sink_error
	wire         sd_cmd_s1_agent_rdata_fifo_out_valid;                                    // sd_cmd_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] sd_cmd_s1_agent_rdata_fifo_out_data;                                     // sd_cmd_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire         sd_cmd_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_003:in_0_ready -> sd_cmd_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_003_out_0_valid;                                       // avalon_st_adapter_003:out_0_valid -> sd_cmd_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                        // avalon_st_adapter_003:out_0_data -> sd_cmd_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                       // sd_cmd_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                       // avalon_st_adapter_003:out_0_error -> sd_cmd_s1_agent:rdata_fifo_sink_error
	wire         sd_dat_s1_agent_rdata_fifo_out_valid;                                    // sd_dat_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] sd_dat_s1_agent_rdata_fifo_out_data;                                     // sd_dat_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire         sd_dat_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_004:in_0_ready -> sd_dat_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_004_out_0_valid;                                       // avalon_st_adapter_004:out_0_valid -> sd_dat_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                        // avalon_st_adapter_004:out_0_data -> sd_dat_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                       // sd_dat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                       // avalon_st_adapter_004:out_0_error -> sd_dat_s1_agent:rdata_fifo_sink_error
	wire         sd_wp_n_s1_agent_rdata_fifo_out_valid;                                   // sd_wp_n_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] sd_wp_n_s1_agent_rdata_fifo_out_data;                                    // sd_wp_n_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire         sd_wp_n_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_005:in_0_ready -> sd_wp_n_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_005_out_0_valid;                                       // avalon_st_adapter_005:out_0_valid -> sd_wp_n_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                        // avalon_st_adapter_005:out_0_data -> sd_wp_n_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                       // sd_wp_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                       // avalon_st_adapter_005:out_0_error -> sd_wp_n_s1_agent:rdata_fifo_sink_error
	wire         epp_i2c_scl_s1_agent_rdata_fifo_out_valid;                               // epp_i2c_scl_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] epp_i2c_scl_s1_agent_rdata_fifo_out_data;                                // epp_i2c_scl_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire         epp_i2c_scl_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_006:in_0_ready -> epp_i2c_scl_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_006_out_0_valid;                                       // avalon_st_adapter_006:out_0_valid -> epp_i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                        // avalon_st_adapter_006:out_0_data -> epp_i2c_scl_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                       // epp_i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                       // avalon_st_adapter_006:out_0_error -> epp_i2c_scl_s1_agent:rdata_fifo_sink_error
	wire         epp_i2c_sda_s1_agent_rdata_fifo_out_valid;                               // epp_i2c_sda_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] epp_i2c_sda_s1_agent_rdata_fifo_out_data;                                // epp_i2c_sda_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire         epp_i2c_sda_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_007:in_0_ready -> epp_i2c_sda_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_007_out_0_valid;                                       // avalon_st_adapter_007:out_0_valid -> epp_i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                        // avalon_st_adapter_007:out_0_data -> epp_i2c_sda_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                       // epp_i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                       // avalon_st_adapter_007:out_0_error -> epp_i2c_sda_s1_agent:rdata_fifo_sink_error
	wire         sw_s1_agent_rdata_fifo_out_valid;                                        // sw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] sw_s1_agent_rdata_fifo_out_data;                                         // sw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire         sw_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_008:in_0_ready -> sw_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_008_out_0_valid;                                       // avalon_st_adapter_008:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                        // avalon_st_adapter_008:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                       // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                       // avalon_st_adapter_008:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire         i2c_scl_s1_agent_rdata_fifo_out_valid;                                   // i2c_scl_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] i2c_scl_s1_agent_rdata_fifo_out_data;                                    // i2c_scl_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire         i2c_scl_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_009:in_0_ready -> i2c_scl_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_009_out_0_valid;                                       // avalon_st_adapter_009:out_0_valid -> i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                        // avalon_st_adapter_009:out_0_data -> i2c_scl_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                       // i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                       // avalon_st_adapter_009:out_0_error -> i2c_scl_s1_agent:rdata_fifo_sink_error
	wire         i2c_sda_s1_agent_rdata_fifo_out_valid;                                   // i2c_sda_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] i2c_sda_s1_agent_rdata_fifo_out_data;                                    // i2c_sda_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire         i2c_sda_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_010:in_0_ready -> i2c_sda_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_010_out_0_valid;                                       // avalon_st_adapter_010:out_0_valid -> i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                        // avalon_st_adapter_010:out_0_data -> i2c_sda_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                       // i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                       // avalon_st_adapter_010:out_0_error -> i2c_sda_s1_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_out_valid;                                     // timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_out_data;                                      // timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire         timer_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_011:in_0_ready -> timer_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_011_out_0_valid;                                       // avalon_st_adapter_011:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                        // avalon_st_adapter_011:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                       // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                       // avalon_st_adapter_011:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire         ledg_s1_agent_rdata_fifo_out_valid;                                      // ledg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] ledg_s1_agent_rdata_fifo_out_data;                                       // ledg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire         ledg_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_012:in_0_ready -> ledg_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_012_out_0_valid;                                       // avalon_st_adapter_012:out_0_valid -> ledg_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                        // avalon_st_adapter_012:out_0_data -> ledg_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                       // ledg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                       // avalon_st_adapter_012:out_0_error -> ledg_s1_agent:rdata_fifo_sink_error
	wire         ledr_s1_agent_rdata_fifo_out_valid;                                      // ledr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] ledr_s1_agent_rdata_fifo_out_data;                                       // ledr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire         ledr_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_013:in_0_ready -> ledr_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_013_out_0_valid;                                       // avalon_st_adapter_013:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                        // avalon_st_adapter_013:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                       // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                       // avalon_st_adapter_013:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire         ir_s1_agent_rdata_fifo_out_valid;                                        // ir_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] ir_s1_agent_rdata_fifo_out_data;                                         // ir_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire         ir_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_014:in_0_ready -> ir_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_014_out_0_valid;                                       // avalon_st_adapter_014:out_0_valid -> ir_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                        // avalon_st_adapter_014:out_0_data -> ir_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                       // ir_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                       // avalon_st_adapter_014:out_0_error -> ir_s1_agent:rdata_fifo_sink_error
	wire         rs232_s1_agent_rdata_fifo_out_valid;                                     // rs232_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] rs232_s1_agent_rdata_fifo_out_data;                                      // rs232_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire         rs232_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_015:in_0_ready -> rs232_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_015_out_0_valid;                                       // avalon_st_adapter_015:out_0_valid -> rs232_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                        // avalon_st_adapter_015:out_0_data -> rs232_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                       // rs232_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                       // avalon_st_adapter_015:out_0_error -> rs232_s1_agent:rdata_fifo_sink_error
	wire         to_sw_sig_s1_agent_rdata_fifo_out_valid;                                 // to_sw_sig_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] to_sw_sig_s1_agent_rdata_fifo_out_data;                                  // to_sw_sig_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire         to_sw_sig_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_016:in_0_ready -> to_sw_sig_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_016_out_0_valid;                                       // avalon_st_adapter_016:out_0_valid -> to_sw_sig_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                        // avalon_st_adapter_016:out_0_data -> to_sw_sig_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                       // to_sw_sig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                       // avalon_st_adapter_016:out_0_error -> to_sw_sig_s1_agent:rdata_fifo_sink_error
	wire         to_hw_sig_s1_agent_rdata_fifo_out_valid;                                 // to_hw_sig_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire  [33:0] to_hw_sig_s1_agent_rdata_fifo_out_data;                                  // to_hw_sig_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire         to_hw_sig_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_017:in_0_ready -> to_hw_sig_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_017_out_0_valid;                                       // avalon_st_adapter_017:out_0_valid -> to_hw_sig_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_017_out_0_data;                                        // avalon_st_adapter_017:out_0_data -> to_hw_sig_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                       // to_hw_sig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                       // avalon_st_adapter_017:out_0_error -> to_hw_sig_s1_agent:rdata_fifo_sink_error
	wire         to_hw_port_s1_agent_rdata_fifo_out_valid;                                // to_hw_port_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire  [33:0] to_hw_port_s1_agent_rdata_fifo_out_data;                                 // to_hw_port_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire         to_hw_port_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_018:in_0_ready -> to_hw_port_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_018_out_0_valid;                                       // avalon_st_adapter_018:out_0_valid -> to_hw_port_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_018_out_0_data;                                        // avalon_st_adapter_018:out_0_data -> to_hw_port_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_018_out_0_ready;                                       // to_hw_port_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire   [0:0] avalon_st_adapter_018_out_0_error;                                       // avalon_st_adapter_018:out_0_error -> to_hw_port_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (9),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) clock_crossing_io_m0_translator (
		.clk                    (altpll_c2_clk),                                                           //                       clk.clk
		.reset                  (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (clock_crossing_io_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (clock_crossing_io_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (clock_crossing_io_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (clock_crossing_io_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (clock_crossing_io_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (clock_crossing_io_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (clock_crossing_io_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (clock_crossing_io_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (clock_crossing_io_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (clock_crossing_io_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (clock_crossing_io_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (clock_crossing_io_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (clock_crossing_io_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (clock_crossing_io_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (clock_crossing_io_m0_byteenable),                                         //                          .byteenable
		.av_read                (clock_crossing_io_m0_read),                                               //                          .read
		.av_readdata            (clock_crossing_io_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (clock_crossing_io_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (clock_crossing_io_m0_write),                                              //                          .write
		.av_writedata           (clock_crossing_io_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (clock_crossing_io_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (25),
		.AV_WRITE_WAIT_CYCLES           (25),
		.AV_SETUP_WAIT_CYCLES           (25),
		.AV_DATA_HOLD_CYCLES            (25)
	) lcd_control_slave_translator (
		.clk                    (altpll_c0_clk),                            //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (lcd_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lcd_control_slave_agent_m0_read),          //                         .read
		.uav_write              (lcd_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (lcd_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lcd_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lcd_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lcd_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lcd_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lcd_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lcd_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (lcd_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (lcd_control_slave_write),                  //                         .write
		.av_read                (lcd_control_slave_read),                   //                         .read
		.av_readdata            (lcd_control_slave_readdata),               //                         .readdata
		.av_writedata           (lcd_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (lcd_control_slave_begintransfer),          //                         .begintransfer
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                  //                         .read
		.uav_write              (key_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (key_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                          //                         .write
		.av_readdata            (key_s1_readdata),                       //                         .readdata
		.av_writedata           (key_s1_writedata),                      //                         .writedata
		.av_chipselect          (key_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_clk_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_clk_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sd_clk_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sd_clk_s1_agent_m0_read),               //                         .read
		.uav_write              (sd_clk_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (sd_clk_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sd_clk_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sd_clk_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sd_clk_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sd_clk_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sd_clk_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sd_clk_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sd_clk_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (sd_clk_s1_write),                       //                         .write
		.av_readdata            (sd_clk_s1_readdata),                    //                         .readdata
		.av_writedata           (sd_clk_s1_writedata),                   //                         .writedata
		.av_chipselect          (sd_clk_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_cmd_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_cmd_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sd_cmd_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sd_cmd_s1_agent_m0_read),               //                         .read
		.uav_write              (sd_cmd_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (sd_cmd_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sd_cmd_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sd_cmd_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sd_cmd_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sd_cmd_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sd_cmd_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sd_cmd_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sd_cmd_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (sd_cmd_s1_write),                       //                         .write
		.av_readdata            (sd_cmd_s1_readdata),                    //                         .readdata
		.av_writedata           (sd_cmd_s1_writedata),                   //                         .writedata
		.av_chipselect          (sd_cmd_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_dat_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_dat_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sd_dat_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sd_dat_s1_agent_m0_read),               //                         .read
		.uav_write              (sd_dat_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (sd_dat_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sd_dat_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sd_dat_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sd_dat_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sd_dat_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sd_dat_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sd_dat_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sd_dat_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (sd_dat_s1_write),                       //                         .write
		.av_readdata            (sd_dat_s1_readdata),                    //                         .readdata
		.av_writedata           (sd_dat_s1_writedata),                   //                         .writedata
		.av_chipselect          (sd_dat_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_wp_n_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_wp_n_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sd_wp_n_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sd_wp_n_s1_agent_m0_read),              //                         .read
		.uav_write              (sd_wp_n_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (sd_wp_n_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sd_wp_n_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sd_wp_n_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sd_wp_n_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sd_wp_n_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sd_wp_n_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sd_wp_n_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sd_wp_n_s1_address),                    //      avalon_anti_slave_0.address
		.av_readdata            (sd_wp_n_s1_readdata),                   //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epp_i2c_scl_s1_translator (
		.clk                    (altpll_c0_clk),                                 //                      clk.clk
		.reset                  (epp_i2c_scl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epp_i2c_scl_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (epp_i2c_scl_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (epp_i2c_scl_s1_agent_m0_read),                  //                         .read
		.uav_write              (epp_i2c_scl_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (epp_i2c_scl_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (epp_i2c_scl_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (epp_i2c_scl_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (epp_i2c_scl_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (epp_i2c_scl_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (epp_i2c_scl_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (epp_i2c_scl_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (epp_i2c_scl_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (epp_i2c_scl_s1_write),                          //                         .write
		.av_readdata            (epp_i2c_scl_s1_readdata),                       //                         .readdata
		.av_writedata           (epp_i2c_scl_s1_writedata),                      //                         .writedata
		.av_chipselect          (epp_i2c_scl_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epp_i2c_sda_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epp_i2c_sda_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (epp_i2c_sda_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (epp_i2c_sda_s1_agent_m0_read),          //                         .read
		.uav_write              (epp_i2c_sda_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (epp_i2c_sda_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (epp_i2c_sda_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (epp_i2c_sda_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (epp_i2c_sda_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (epp_i2c_sda_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (epp_i2c_sda_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (epp_i2c_sda_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (epp_i2c_sda_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (epp_i2c_sda_s1_write),                  //                         .write
		.av_readdata            (epp_i2c_sda_s1_readdata),               //                         .readdata
		.av_writedata           (epp_i2c_sda_s1_writedata),              //                         .writedata
		.av_chipselect          (epp_i2c_sda_s1_chipselect),             //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                   //                         .read
		.uav_write              (sw_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (sw_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (sw_s1_write),                           //                         .write
		.av_readdata            (sw_s1_readdata),                        //                         .readdata
		.av_writedata           (sw_s1_writedata),                       //                         .writedata
		.av_chipselect          (sw_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_scl_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_scl_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_scl_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (i2c_scl_s1_agent_m0_read),              //                         .read
		.uav_write              (i2c_scl_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (i2c_scl_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (i2c_scl_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (i2c_scl_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (i2c_scl_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (i2c_scl_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (i2c_scl_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (i2c_scl_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (i2c_scl_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (i2c_scl_s1_write),                      //                         .write
		.av_readdata            (i2c_scl_s1_readdata),                   //                         .readdata
		.av_writedata           (i2c_scl_s1_writedata),                  //                         .writedata
		.av_chipselect          (i2c_scl_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_sda_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_sda_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_sda_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (i2c_sda_s1_agent_m0_read),              //                         .read
		.uav_write              (i2c_sda_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (i2c_sda_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (i2c_sda_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (i2c_sda_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (i2c_sda_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (i2c_sda_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (i2c_sda_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (i2c_sda_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (i2c_sda_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (i2c_sda_s1_write),                      //                         .write
		.av_readdata            (i2c_sda_s1_readdata),                   //                         .readdata
		.av_writedata           (i2c_sda_s1_writedata),                  //                         .writedata
		.av_chipselect          (i2c_sda_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                        //                         .write
		.av_readdata            (timer_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledg_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledg_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ledg_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ledg_s1_agent_m0_read),                 //                         .read
		.uav_write              (ledg_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ledg_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ledg_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ledg_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ledg_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ledg_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ledg_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ledg_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ledg_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (ledg_s1_write),                         //                         .write
		.av_readdata            (ledg_s1_readdata),                      //                         .readdata
		.av_writedata           (ledg_s1_writedata),                     //                         .writedata
		.av_chipselect          (ledg_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                 //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ledr_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                         //                         .write
		.av_readdata            (ledr_s1_readdata),                      //                         .readdata
		.av_writedata           (ledr_s1_writedata),                     //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ir_s1_translator (
		.clk                    (altpll_c0_clk),                        //                      clk.clk
		.reset                  (ir_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ir_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ir_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ir_s1_agent_m0_read),                  //                         .read
		.uav_write              (ir_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ir_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ir_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ir_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ir_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ir_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ir_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ir_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ir_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (ir_s1_readdata),                       //                         .readdata
		.av_write               (),                                     //              (terminated)
		.av_read                (),                                     //              (terminated)
		.av_writedata           (),                                     //              (terminated)
		.av_begintransfer       (),                                     //              (terminated)
		.av_beginbursttransfer  (),                                     //              (terminated)
		.av_burstcount          (),                                     //              (terminated)
		.av_byteenable          (),                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                 //              (terminated)
		.av_waitrequest         (1'b0),                                 //              (terminated)
		.av_writebyteenable     (),                                     //              (terminated)
		.av_lock                (),                                     //              (terminated)
		.av_chipselect          (),                                     //              (terminated)
		.av_clken               (),                                     //              (terminated)
		.uav_clken              (1'b0),                                 //              (terminated)
		.av_debugaccess         (),                                     //              (terminated)
		.av_outputenable        (),                                     //              (terminated)
		.uav_response           (),                                     //              (terminated)
		.av_response            (2'b00),                                //              (terminated)
		.uav_writeresponsevalid (),                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rs232_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rs232_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (rs232_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (rs232_s1_agent_m0_read),                //                         .read
		.uav_write              (rs232_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (rs232_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (rs232_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (rs232_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (rs232_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (rs232_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (rs232_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (rs232_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (rs232_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (rs232_s1_write),                        //                         .write
		.av_read                (rs232_s1_read),                         //                         .read
		.av_readdata            (rs232_s1_readdata),                     //                         .readdata
		.av_writedata           (rs232_s1_writedata),                    //                         .writedata
		.av_begintransfer       (rs232_s1_begintransfer),                //                         .begintransfer
		.av_chipselect          (rs232_s1_chipselect),                   //                         .chipselect
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_sw_sig_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                 //                      clk.clk
		.reset                  (to_sw_sig_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (to_sw_sig_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (to_sw_sig_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (to_sw_sig_s1_agent_m0_read),                  //                         .read
		.uav_write              (to_sw_sig_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (to_sw_sig_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (to_sw_sig_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (to_sw_sig_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (to_sw_sig_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (to_sw_sig_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (to_sw_sig_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (to_sw_sig_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (to_sw_sig_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (to_sw_sig_s1_readdata),                       //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_hw_sig_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                 //                      clk.clk
		.reset                  (to_sw_sig_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (to_hw_sig_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (to_hw_sig_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (to_hw_sig_s1_agent_m0_read),                  //                         .read
		.uav_write              (to_hw_sig_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (to_hw_sig_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (to_hw_sig_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (to_hw_sig_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (to_hw_sig_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (to_hw_sig_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (to_hw_sig_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (to_hw_sig_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (to_hw_sig_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (to_hw_sig_s1_write),                          //                         .write
		.av_readdata            (to_hw_sig_s1_readdata),                       //                         .readdata
		.av_writedata           (to_hw_sig_s1_writedata),                      //                         .writedata
		.av_chipselect          (to_hw_sig_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_hw_port_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                 //                      clk.clk
		.reset                  (to_sw_sig_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (to_hw_port_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (to_hw_port_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (to_hw_port_s1_agent_m0_read),                 //                         .read
		.uav_write              (to_hw_port_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (to_hw_port_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (to_hw_port_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (to_hw_port_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (to_hw_port_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (to_hw_port_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (to_hw_port_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (to_hw_port_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (to_hw_port_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (to_hw_port_s1_write),                         //                         .write
		.av_readdata            (to_hw_port_s1_readdata),                      //                         .readdata
		.av_writedata           (to_hw_port_s1_writedata),                     //                         .writedata
		.av_chipselect          (to_hw_port_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) clock_crossing_io_m0_agent (
		.clk                   (altpll_c2_clk),                                                           //       clk.clk
		.reset                 (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (clock_crossing_io_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (clock_crossing_io_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (clock_crossing_io_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (clock_crossing_io_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (clock_crossing_io_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (clock_crossing_io_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (clock_crossing_io_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (clock_crossing_io_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (clock_crossing_io_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (clock_crossing_io_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (clock_crossing_io_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (clock_crossing_io_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (clock_crossing_io_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (clock_crossing_io_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (clock_crossing_io_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (clock_crossing_io_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (clock_crossing_io_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (clock_crossing_io_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (clock_crossing_io_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (clock_crossing_io_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (clock_crossing_io_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (clock_crossing_io_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_control_slave_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (lcd_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                //                .channel
		.rf_sink_ready           (lcd_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (lcd_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_control_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (lcd_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_control_slave_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (lcd_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lcd_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lcd_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lcd_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lcd_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lcd_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (altpll_c0_clk),                           //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_001_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                 //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),       //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                           //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (key_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (key_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (key_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (key_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (key_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_clk_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sd_clk_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_clk_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_clk_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_clk_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_clk_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_clk_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_clk_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_clk_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_clk_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_clk_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_clk_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_clk_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_clk_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_clk_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_clk_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_clk_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_002_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                    //                .channel
		.rf_sink_ready           (sd_clk_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_clk_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_clk_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_clk_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_clk_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_clk_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_clk_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_clk_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_clk_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_clk_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),          //                .error
		.rdata_fifo_src_ready    (sd_clk_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_clk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_clk_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_clk_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sd_clk_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sd_clk_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_clk_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_clk_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_clk_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_clk_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_clk_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_clk_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_clk_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_clk_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_clk_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sd_clk_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (sd_clk_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (sd_clk_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (sd_clk_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (sd_clk_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (sd_clk_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_cmd_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sd_cmd_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_cmd_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_cmd_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_cmd_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_cmd_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_cmd_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_cmd_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_cmd_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_cmd_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_cmd_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_cmd_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_cmd_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_cmd_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_cmd_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_cmd_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_cmd_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                    //                .channel
		.rf_sink_ready           (sd_cmd_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_cmd_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_cmd_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_cmd_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_cmd_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_cmd_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_cmd_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_cmd_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_cmd_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_cmd_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),          //                .error
		.rdata_fifo_src_ready    (sd_cmd_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_cmd_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_cmd_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_cmd_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sd_cmd_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sd_cmd_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_cmd_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_cmd_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_cmd_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_cmd_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_cmd_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_cmd_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_cmd_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_cmd_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_cmd_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sd_cmd_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (sd_cmd_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (sd_cmd_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (sd_cmd_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (sd_cmd_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (sd_cmd_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_dat_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sd_dat_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_dat_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_dat_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_dat_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_dat_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_dat_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_dat_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_dat_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_dat_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_dat_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_dat_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_dat_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_dat_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_dat_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_dat_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_dat_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                    //                .channel
		.rf_sink_ready           (sd_dat_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_dat_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_dat_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_dat_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_dat_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_dat_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_dat_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_dat_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_dat_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_dat_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),          //                .error
		.rdata_fifo_src_ready    (sd_dat_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_dat_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_dat_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_dat_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sd_dat_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sd_dat_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_dat_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_dat_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_dat_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_dat_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_dat_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_dat_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_dat_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_dat_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_dat_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sd_dat_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (sd_dat_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (sd_dat_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (sd_dat_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (sd_dat_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (sd_dat_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_wp_n_s1_agent (
		.clk                     (altpll_c0_clk),                               //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sd_wp_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_wp_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_wp_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_wp_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_wp_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_wp_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_wp_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_wp_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_wp_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_wp_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_wp_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_wp_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_wp_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_wp_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_wp_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_wp_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                     //                .channel
		.rf_sink_ready           (sd_wp_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_wp_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_wp_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_wp_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_wp_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_wp_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_wp_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_wp_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_wp_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_wp_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),           //                .error
		.rdata_fifo_src_ready    (sd_wp_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_wp_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_wp_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_wp_n_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                               //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sd_wp_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sd_wp_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_wp_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_wp_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_wp_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_wp_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_wp_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_wp_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_wp_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_wp_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_wp_n_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sd_wp_n_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sd_wp_n_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sd_wp_n_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sd_wp_n_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sd_wp_n_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sd_wp_n_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epp_i2c_scl_s1_agent (
		.clk                     (altpll_c0_clk),                                   //             clk.clk
		.reset                   (epp_i2c_scl_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (epp_i2c_scl_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epp_i2c_scl_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epp_i2c_scl_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epp_i2c_scl_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epp_i2c_scl_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (epp_i2c_scl_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epp_i2c_scl_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epp_i2c_scl_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (epp_i2c_scl_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epp_i2c_scl_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (epp_i2c_scl_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (epp_i2c_scl_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epp_i2c_scl_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (epp_i2c_scl_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (epp_i2c_scl_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (epp_i2c_scl_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_006_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                         //                .channel
		.rf_sink_ready           (epp_i2c_scl_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epp_i2c_scl_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epp_i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epp_i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epp_i2c_scl_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epp_i2c_scl_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epp_i2c_scl_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epp_i2c_scl_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epp_i2c_scl_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epp_i2c_scl_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),               //                .error
		.rdata_fifo_src_ready    (epp_i2c_scl_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epp_i2c_scl_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epp_i2c_scl_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epp_i2c_scl_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                   //       clk.clk
		.reset             (epp_i2c_scl_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (epp_i2c_scl_s1_agent_rf_source_data),             //        in.data
		.in_valid          (epp_i2c_scl_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (epp_i2c_scl_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epp_i2c_scl_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epp_i2c_scl_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epp_i2c_scl_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epp_i2c_scl_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epp_i2c_scl_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epp_i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epp_i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epp_i2c_scl_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                 //       clk.clk
		.reset             (epp_i2c_scl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (epp_i2c_scl_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (epp_i2c_scl_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (epp_i2c_scl_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (epp_i2c_scl_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (epp_i2c_scl_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (epp_i2c_scl_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epp_i2c_sda_s1_agent (
		.clk                     (altpll_c0_clk),                                   //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (epp_i2c_sda_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epp_i2c_sda_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epp_i2c_sda_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epp_i2c_sda_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epp_i2c_sda_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (epp_i2c_sda_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epp_i2c_sda_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epp_i2c_sda_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (epp_i2c_sda_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epp_i2c_sda_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (epp_i2c_sda_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (epp_i2c_sda_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epp_i2c_sda_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (epp_i2c_sda_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (epp_i2c_sda_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (epp_i2c_sda_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                         //                .channel
		.rf_sink_ready           (epp_i2c_sda_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epp_i2c_sda_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epp_i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epp_i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epp_i2c_sda_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epp_i2c_sda_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epp_i2c_sda_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epp_i2c_sda_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epp_i2c_sda_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epp_i2c_sda_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),               //                .error
		.rdata_fifo_src_ready    (epp_i2c_sda_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epp_i2c_sda_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epp_i2c_sda_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epp_i2c_sda_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                   //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (epp_i2c_sda_s1_agent_rf_source_data),             //        in.data
		.in_valid          (epp_i2c_sda_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (epp_i2c_sda_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epp_i2c_sda_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epp_i2c_sda_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epp_i2c_sda_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epp_i2c_sda_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epp_i2c_sda_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epp_i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epp_i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epp_i2c_sda_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                             //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (epp_i2c_sda_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (epp_i2c_sda_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (epp_i2c_sda_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (epp_i2c_sda_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (epp_i2c_sda_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (epp_i2c_sda_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (altpll_c0_clk),                          //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                  //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                  //                .valid
		.cp_data                 (cmd_mux_008_src_data),                   //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),            //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),      //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                          //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_scl_s1_agent (
		.clk                     (altpll_c0_clk),                               //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (i2c_scl_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_scl_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_scl_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_scl_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_scl_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_scl_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_scl_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_scl_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_scl_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_scl_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_scl_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_scl_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_scl_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_scl_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_scl_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_scl_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_009_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                     //                .channel
		.rf_sink_ready           (i2c_scl_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_scl_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_scl_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_scl_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_scl_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_scl_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_scl_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_scl_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),           //                .error
		.rdata_fifo_src_ready    (i2c_scl_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_scl_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_scl_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                               //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_scl_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_scl_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_scl_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_scl_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_scl_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_scl_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_scl_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_scl_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_scl_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_scl_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_scl_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_scl_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_sda_s1_agent (
		.clk                     (altpll_c0_clk),                               //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (i2c_sda_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_sda_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_sda_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_sda_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_sda_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_sda_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_sda_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_sda_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_sda_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_sda_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_sda_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_sda_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_sda_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_sda_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_sda_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_sda_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_010_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                     //                .channel
		.rf_sink_ready           (i2c_sda_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_sda_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_sda_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_sda_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_sda_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_sda_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_sda_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_sda_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),           //                .error
		.rdata_fifo_src_ready    (i2c_sda_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_sda_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_sda_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                               //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_sda_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_sda_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_sda_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_sda_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_sda_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_sda_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_sda_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_sda_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_sda_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_sda_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_sda_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_sda_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (altpll_c0_clk),                             //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_011_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                   //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),         //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                             //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (timer_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (timer_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (timer_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (timer_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (timer_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledg_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ledg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_012_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                  //                .channel
		.rf_sink_ready           (ledg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ledg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledg_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (ledg_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (ledg_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (ledg_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (ledg_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (ledg_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_013_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                  //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (ledr_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (ledr_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (ledr_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (ledr_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (ledr_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ir_s1_agent (
		.clk                     (altpll_c0_clk),                          //             clk.clk
		.reset                   (ir_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ir_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ir_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ir_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ir_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ir_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ir_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ir_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ir_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ir_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ir_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ir_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ir_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ir_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ir_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ir_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ir_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                  //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                  //                .valid
		.cp_data                 (cmd_mux_014_src_data),                   //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),            //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                //                .channel
		.rf_sink_ready           (ir_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ir_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ir_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ir_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ir_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ir_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ir_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ir_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ir_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ir_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),      //                .error
		.rdata_fifo_src_ready    (ir_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ir_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ir_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ir_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                          //       clk.clk
		.reset             (ir_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ir_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ir_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ir_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ir_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ir_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ir_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ir_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ir_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ir_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ir_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ir_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                        //       clk.clk
		.reset             (ir_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ir_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ir_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ir_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ir_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ir_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ir_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                // (terminated)
		.csr_read          (1'b0),                                 // (terminated)
		.csr_write         (1'b0),                                 // (terminated)
		.csr_readdata      (),                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000), // (terminated)
		.almost_full_data  (),                                     // (terminated)
		.almost_empty_data (),                                     // (terminated)
		.in_startofpacket  (1'b0),                                 // (terminated)
		.in_endofpacket    (1'b0),                                 // (terminated)
		.out_startofpacket (),                                     // (terminated)
		.out_endofpacket   (),                                     // (terminated)
		.in_empty          (1'b0),                                 // (terminated)
		.out_empty         (),                                     // (terminated)
		.in_error          (1'b0),                                 // (terminated)
		.out_error         (),                                     // (terminated)
		.in_channel        (1'b0),                                 // (terminated)
		.out_channel       ()                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rs232_s1_agent (
		.clk                     (altpll_c0_clk),                             //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (rs232_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rs232_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rs232_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rs232_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rs232_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (rs232_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rs232_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rs232_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (rs232_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rs232_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (rs232_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (rs232_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rs232_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (rs232_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (rs232_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (rs232_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_015_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                   //                .channel
		.rf_sink_ready           (rs232_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rs232_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rs232_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rs232_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rs232_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rs232_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rs232_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rs232_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rs232_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rs232_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),         //                .error
		.rdata_fifo_src_ready    (rs232_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rs232_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rs232_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rs232_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                             //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (rs232_s1_agent_rf_source_data),             //        in.data
		.in_valid          (rs232_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (rs232_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rs232_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rs232_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rs232_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rs232_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rs232_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rs232_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rs232_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rs232_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rs232_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (rs232_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (rs232_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (rs232_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (rs232_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (rs232_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_sw_sig_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                   //             clk.clk
		.reset                   (to_sw_sig_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (to_sw_sig_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (to_sw_sig_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (to_sw_sig_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (to_sw_sig_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (to_sw_sig_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (to_sw_sig_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (to_sw_sig_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (to_sw_sig_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (to_sw_sig_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (to_sw_sig_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (to_sw_sig_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (to_sw_sig_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (to_sw_sig_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (to_sw_sig_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (to_sw_sig_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (to_sw_sig_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_016_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                       //                .channel
		.rf_sink_ready           (to_sw_sig_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (to_sw_sig_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (to_sw_sig_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (to_sw_sig_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (to_sw_sig_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (to_sw_sig_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (to_sw_sig_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (to_sw_sig_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (to_sw_sig_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (to_sw_sig_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),             //                .error
		.rdata_fifo_src_ready    (to_sw_sig_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_sw_sig_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (to_sw_sig_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_sw_sig_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                   //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (to_sw_sig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (to_sw_sig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (to_sw_sig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_sw_sig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_sw_sig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_sw_sig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_sw_sig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_sw_sig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_sw_sig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_sw_sig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_sw_sig_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (to_sw_sig_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (to_sw_sig_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (to_sw_sig_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (to_sw_sig_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (to_sw_sig_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (to_sw_sig_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_hw_sig_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                   //             clk.clk
		.reset                   (to_sw_sig_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (to_hw_sig_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (to_hw_sig_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (to_hw_sig_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (to_hw_sig_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (to_hw_sig_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (to_hw_sig_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (to_hw_sig_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (to_hw_sig_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (to_hw_sig_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (to_hw_sig_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (to_hw_sig_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (to_hw_sig_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (to_hw_sig_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (to_hw_sig_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (to_hw_sig_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (to_hw_sig_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_017_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                       //                .channel
		.rf_sink_ready           (to_hw_sig_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (to_hw_sig_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (to_hw_sig_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (to_hw_sig_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (to_hw_sig_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (to_hw_sig_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (to_hw_sig_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (to_hw_sig_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (to_hw_sig_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (to_hw_sig_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),             //                .error
		.rdata_fifo_src_ready    (to_hw_sig_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_hw_sig_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (to_hw_sig_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_hw_sig_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                   //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (to_hw_sig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (to_hw_sig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (to_hw_sig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_hw_sig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_hw_sig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_hw_sig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_hw_sig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_hw_sig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_hw_sig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_hw_sig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_hw_sig_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (to_hw_sig_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (to_hw_sig_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (to_hw_sig_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (to_hw_sig_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (to_hw_sig_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (to_hw_sig_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_hw_port_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                    //             clk.clk
		.reset                   (to_sw_sig_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (to_hw_port_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (to_hw_port_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (to_hw_port_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (to_hw_port_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (to_hw_port_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (to_hw_port_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (to_hw_port_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (to_hw_port_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (to_hw_port_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (to_hw_port_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (to_hw_port_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (to_hw_port_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (to_hw_port_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (to_hw_port_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (to_hw_port_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (to_hw_port_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_018_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                        //                .channel
		.rf_sink_ready           (to_hw_port_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (to_hw_port_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (to_hw_port_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (to_hw_port_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (to_hw_port_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (to_hw_port_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (to_hw_port_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (to_hw_port_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (to_hw_port_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (to_hw_port_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),              //                .error
		.rdata_fifo_src_ready    (to_hw_port_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_hw_port_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (to_hw_port_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_hw_port_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                    //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (to_hw_port_s1_agent_rf_source_data),             //        in.data
		.in_valid          (to_hw_port_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (to_hw_port_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_hw_port_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_hw_port_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_hw_port_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_hw_port_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_hw_port_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_hw_port_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_hw_port_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_hw_port_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset             (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (to_hw_port_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (to_hw_port_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (to_hw_port_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (to_hw_port_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (to_hw_port_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (to_hw_port_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router router (
		.sink_ready         (clock_crossing_io_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (clock_crossing_io_m0_agent_cp_valid),                    //          .valid
		.sink_data          (clock_crossing_io_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (clock_crossing_io_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (clock_crossing_io_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (altpll_c2_clk),                                          //       clk.clk
		.reset              (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (lcd_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (lcd_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (lcd_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (lcd_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                            //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                     //       src.ready
		.src_valid          (router_001_src_valid),                     //          .valid
		.src_data           (router_001_src_data),                      //          .data
		.src_channel        (router_001_src_channel),                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (key_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                 //          .valid
		.sink_data          (key_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                  //       src.ready
		.src_valid          (router_002_src_valid),                  //          .valid
		.src_data           (router_002_src_data),                   //          .data
		.src_channel        (router_002_src_channel),                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (sd_clk_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (sd_clk_s1_agent_rp_valid),              //          .valid
		.sink_data          (sd_clk_s1_agent_rp_data),               //          .data
		.sink_startofpacket (sd_clk_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (sd_clk_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                  //       src.ready
		.src_valid          (router_003_src_valid),                  //          .valid
		.src_data           (router_003_src_data),                   //          .data
		.src_channel        (router_003_src_channel),                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (sd_cmd_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (sd_cmd_s1_agent_rp_valid),              //          .valid
		.sink_data          (sd_cmd_s1_agent_rp_data),               //          .data
		.sink_startofpacket (sd_cmd_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (sd_cmd_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                  //       src.ready
		.src_valid          (router_004_src_valid),                  //          .valid
		.src_data           (router_004_src_data),                   //          .data
		.src_channel        (router_004_src_channel),                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (sd_dat_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (sd_dat_s1_agent_rp_valid),              //          .valid
		.sink_data          (sd_dat_s1_agent_rp_data),               //          .data
		.sink_startofpacket (sd_dat_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (sd_dat_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                  //       src.ready
		.src_valid          (router_005_src_valid),                  //          .valid
		.src_data           (router_005_src_data),                   //          .data
		.src_channel        (router_005_src_channel),                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (sd_wp_n_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (sd_wp_n_s1_agent_rp_valid),             //          .valid
		.sink_data          (sd_wp_n_s1_agent_rp_data),              //          .data
		.sink_startofpacket (sd_wp_n_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sd_wp_n_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                  //       src.ready
		.src_valid          (router_006_src_valid),                  //          .valid
		.src_data           (router_006_src_data),                   //          .data
		.src_channel        (router_006_src_channel),                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (epp_i2c_scl_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (epp_i2c_scl_s1_agent_rp_valid),                 //          .valid
		.sink_data          (epp_i2c_scl_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (epp_i2c_scl_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (epp_i2c_scl_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                                 //       clk.clk
		.reset              (epp_i2c_scl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_008 (
		.sink_ready         (epp_i2c_sda_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (epp_i2c_sda_s1_agent_rp_valid),         //          .valid
		.sink_data          (epp_i2c_sda_s1_agent_rp_data),          //          .data
		.sink_startofpacket (epp_i2c_sda_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (epp_i2c_sda_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                  //       src.ready
		.src_valid          (router_008_src_valid),                  //          .valid
		.src_data           (router_008_src_data),                   //          .data
		.src_channel        (router_008_src_channel),                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_009 (
		.sink_ready         (sw_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sw_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                  //       src.ready
		.src_valid          (router_009_src_valid),                  //          .valid
		.src_data           (router_009_src_data),                   //          .data
		.src_channel        (router_009_src_channel),                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_010 (
		.sink_ready         (i2c_scl_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (i2c_scl_s1_agent_rp_valid),             //          .valid
		.sink_data          (i2c_scl_s1_agent_rp_data),              //          .data
		.sink_startofpacket (i2c_scl_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (i2c_scl_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                  //       src.ready
		.src_valid          (router_010_src_valid),                  //          .valid
		.src_data           (router_010_src_data),                   //          .data
		.src_channel        (router_010_src_channel),                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_011 (
		.sink_ready         (i2c_sda_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (i2c_sda_s1_agent_rp_valid),             //          .valid
		.sink_data          (i2c_sda_s1_agent_rp_data),              //          .data
		.sink_startofpacket (i2c_sda_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (i2c_sda_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                  //       src.ready
		.src_valid          (router_011_src_valid),                  //          .valid
		.src_data           (router_011_src_data),                   //          .data
		.src_channel        (router_011_src_channel),                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_012 (
		.sink_ready         (timer_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),               //          .valid
		.sink_data          (timer_s1_agent_rp_data),                //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                  //       src.ready
		.src_valid          (router_012_src_valid),                  //          .valid
		.src_data           (router_012_src_data),                   //          .data
		.src_channel        (router_012_src_channel),                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_013 (
		.sink_ready         (ledg_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ledg_s1_agent_rp_valid),                //          .valid
		.sink_data          (ledg_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ledg_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ledg_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                  //       src.ready
		.src_valid          (router_013_src_valid),                  //          .valid
		.src_data           (router_013_src_data),                   //          .data
		.src_channel        (router_013_src_channel),                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_014 (
		.sink_ready         (ledr_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ledr_s1_agent_rp_valid),                //          .valid
		.sink_data          (ledr_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ledr_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ledr_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                  //       src.ready
		.src_valid          (router_014_src_valid),                  //          .valid
		.src_data           (router_014_src_data),                   //          .data
		.src_channel        (router_014_src_channel),                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_015 (
		.sink_ready         (ir_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ir_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ir_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ir_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ir_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                        //       clk.clk
		.reset              (ir_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                 //       src.ready
		.src_valid          (router_015_src_valid),                 //          .valid
		.src_data           (router_015_src_data),                  //          .data
		.src_channel        (router_015_src_channel),               //          .channel
		.src_startofpacket  (router_015_src_startofpacket),         //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_016 (
		.sink_ready         (rs232_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (rs232_s1_agent_rp_valid),               //          .valid
		.sink_data          (rs232_s1_agent_rp_data),                //          .data
		.sink_startofpacket (rs232_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (rs232_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                  //       src.ready
		.src_valid          (router_016_src_valid),                  //          .valid
		.src_data           (router_016_src_data),                   //          .data
		.src_channel        (router_016_src_channel),                //          .channel
		.src_startofpacket  (router_016_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_017 (
		.sink_ready         (to_sw_sig_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (to_sw_sig_s1_agent_rp_valid),                 //          .valid
		.sink_data          (to_sw_sig_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (to_sw_sig_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (to_sw_sig_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                        //       src.ready
		.src_valid          (router_017_src_valid),                        //          .valid
		.src_data           (router_017_src_data),                         //          .data
		.src_channel        (router_017_src_channel),                      //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                   //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_018 (
		.sink_ready         (to_hw_sig_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (to_hw_sig_s1_agent_rp_valid),                 //          .valid
		.sink_data          (to_hw_sig_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (to_hw_sig_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (to_hw_sig_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                        //       src.ready
		.src_valid          (router_018_src_valid),                        //          .valid
		.src_data           (router_018_src_data),                         //          .data
		.src_channel        (router_018_src_channel),                      //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                   //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_router_001 router_019 (
		.sink_ready         (to_hw_port_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (to_hw_port_s1_agent_rp_valid),                //          .valid
		.sink_data          (to_hw_port_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (to_hw_port_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (to_hw_port_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                        //       src.ready
		.src_valid          (router_019_src_valid),                        //          .valid
		.src_data           (router_019_src_data),                         //          .data
		.src_channel        (router_019_src_channel),                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) clock_crossing_io_m0_limiter (
		.clk                    (altpll_c2_clk),                                          //       clk.clk
		.reset                  (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (clock_crossing_io_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (clock_crossing_io_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (clock_crossing_io_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (clock_crossing_io_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (clock_crossing_io_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (clock_crossing_io_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (clock_crossing_io_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (clock_crossing_io_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (clock_crossing_io_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (clock_crossing_io_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (clock_crossing_io_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (clock_crossing_io_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (altpll_c2_clk),                                          //        clk.clk
		.reset               (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (clock_crossing_io_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (clock_crossing_io_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (clock_crossing_io_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (clock_crossing_io_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (clock_crossing_io_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (clock_crossing_io_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                            //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                  //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                  //           .valid
		.src11_data          (cmd_demux_src11_data),                                   //           .data
		.src11_channel       (cmd_demux_src11_channel),                                //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                          //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                            //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                  //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                  //           .valid
		.src12_data          (cmd_demux_src12_data),                                   //           .data
		.src12_channel       (cmd_demux_src12_channel),                                //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                          //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                            //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                  //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                  //           .valid
		.src13_data          (cmd_demux_src13_data),                                   //           .data
		.src13_channel       (cmd_demux_src13_channel),                                //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                          //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                            //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                  //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                  //           .valid
		.src14_data          (cmd_demux_src14_data),                                   //           .data
		.src14_channel       (cmd_demux_src14_channel),                                //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                          //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                            //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                  //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                  //           .valid
		.src15_data          (cmd_demux_src15_data),                                   //           .data
		.src15_channel       (cmd_demux_src15_channel),                                //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                          //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                            //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                  //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                  //           .valid
		.src16_data          (cmd_demux_src16_data),                                   //           .data
		.src16_channel       (cmd_demux_src16_channel),                                //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                          //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                            //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                  //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                  //           .valid
		.src17_data          (cmd_demux_src17_data),                                   //           .data
		.src17_channel       (cmd_demux_src17_channel),                                //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                          //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                            //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                  //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                  //           .valid
		.src18_data          (cmd_demux_src18_data),                                   //           .data
		.src18_channel       (cmd_demux_src18_channel),                                //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                          //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket)                             //           .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (crosser_out_ready),                     //     sink0.ready
		.sink0_valid         (crosser_out_valid),                     //          .valid
		.sink0_channel       (crosser_out_channel),                   //          .channel
		.sink0_data          (crosser_out_data),                      //          .data
		.sink0_startofpacket (crosser_out_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                 //          .valid
		.sink0_channel       (crosser_001_out_channel),               //          .channel
		.sink0_data          (crosser_001_out_data),                  //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                 //          .valid
		.sink0_channel       (crosser_002_out_channel),               //          .channel
		.sink0_data          (crosser_002_out_data),                  //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                 //          .valid
		.sink0_channel       (crosser_003_out_channel),               //          .channel
		.sink0_data          (crosser_003_out_data),                  //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //          .valid
		.src_data            (cmd_mux_004_src_data),                  //          .data
		.src_channel         (cmd_mux_004_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                 //          .valid
		.sink0_channel       (crosser_004_out_channel),               //          .channel
		.sink0_data          (crosser_004_out_data),                  //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                 //          .valid
		.sink0_channel       (crosser_005_out_channel),               //          .channel
		.sink0_data          (crosser_005_out_data),                  //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (altpll_c0_clk),                                 //       clk.clk
		.reset               (epp_i2c_scl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                         //          .valid
		.sink0_channel       (crosser_006_out_channel),                       //          .channel
		.sink0_data          (crosser_006_out_data),                          //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                    //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                 //          .valid
		.sink0_channel       (crosser_007_out_channel),               //          .channel
		.sink0_data          (crosser_007_out_data),                  //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                 //          .valid
		.sink0_channel       (crosser_008_out_channel),               //          .channel
		.sink0_data          (crosser_008_out_data),                  //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                 //          .valid
		.sink0_channel       (crosser_009_out_channel),               //          .channel
		.sink0_data          (crosser_009_out_data),                  //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                 //          .valid
		.src_data            (cmd_mux_010_src_data),                  //          .data
		.src_channel         (cmd_mux_010_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                 //          .valid
		.sink0_channel       (crosser_010_out_channel),               //          .channel
		.sink0_data          (crosser_010_out_data),                  //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                 //          .valid
		.src_data            (cmd_mux_011_src_data),                  //          .data
		.src_channel         (cmd_mux_011_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                 //          .valid
		.sink0_channel       (crosser_011_out_channel),               //          .channel
		.sink0_data          (crosser_011_out_data),                  //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                 //          .valid
		.src_data            (cmd_mux_012_src_data),                  //          .data
		.src_channel         (cmd_mux_012_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                 //          .valid
		.sink0_channel       (crosser_012_out_channel),               //          .channel
		.sink0_data          (crosser_012_out_data),                  //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                 //          .valid
		.src_data            (cmd_mux_013_src_data),                  //          .data
		.src_channel         (cmd_mux_013_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                 //          .valid
		.sink0_channel       (crosser_013_out_channel),               //          .channel
		.sink0_data          (crosser_013_out_data),                  //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (altpll_c0_clk),                        //       clk.clk
		.reset               (ir_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                //          .valid
		.src_data            (cmd_mux_014_src_data),                 //          .data
		.src_channel         (cmd_mux_014_src_channel),              //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),          //          .endofpacket
		.sink0_ready         (crosser_014_out_ready),                //     sink0.ready
		.sink0_valid         (crosser_014_out_valid),                //          .valid
		.sink0_channel       (crosser_014_out_channel),              //          .channel
		.sink0_data          (crosser_014_out_data),                 //          .data
		.sink0_startofpacket (crosser_014_out_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (crosser_014_out_endofpacket)           //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_015 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                 //          .valid
		.src_data            (cmd_mux_015_src_data),                  //          .data
		.src_channel         (cmd_mux_015_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                 //          .valid
		.sink0_channel       (crosser_015_out_channel),               //          .channel
		.sink0_data          (crosser_015_out_data),                  //          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_016 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                       //          .valid
		.src_data            (cmd_mux_016_src_data),                        //          .data
		.src_channel         (cmd_mux_016_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                       //          .valid
		.sink0_channel       (crosser_016_out_channel),                     //          .channel
		.sink0_data          (crosser_016_out_data),                        //          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket)                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_017 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                       //          .valid
		.src_data            (cmd_mux_017_src_data),                        //          .data
		.src_channel         (cmd_mux_017_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_017_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_017_out_valid),                       //          .valid
		.sink0_channel       (crosser_017_out_channel),                     //          .channel
		.sink0_data          (crosser_017_out_data),                        //          .data
		.sink0_startofpacket (crosser_017_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_017_out_endofpacket)                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_cmd_mux cmd_mux_018 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                       //          .valid
		.src_data            (cmd_mux_018_src_data),                        //          .data
		.src_channel         (cmd_mux_018_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_018_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_018_out_valid),                       //          .valid
		.sink0_channel       (crosser_018_out_channel),                     //          .channel
		.sink0_data          (crosser_018_out_data),                        //          .data
		.sink0_startofpacket (crosser_018_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_018_out_endofpacket)                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //      sink.ready
		.sink_channel       (router_001_src_channel),                //          .channel
		.sink_data          (router_001_src_data),                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_001_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                  //      sink.ready
		.sink_channel       (router_002_src_channel),                //          .channel
		.sink_data          (router_002_src_data),                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_002_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //          .valid
		.src0_data          (rsp_demux_001_src0_data),               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //          .valid
		.src0_data          (rsp_demux_004_src0_data),               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                  //      sink.ready
		.sink_channel       (router_006_src_channel),                //          .channel
		.sink_data          (router_006_src_data),                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_006_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (altpll_c0_clk),                                 //       clk.clk
		.reset              (epp_i2c_scl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                  //      sink.ready
		.sink_channel       (router_008_src_channel),                //          .channel
		.sink_data          (router_008_src_data),                   //          .data
		.sink_startofpacket (router_008_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_008_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //      sink.ready
		.sink_channel       (router_010_src_channel),                //          .channel
		.sink_data          (router_010_src_data),                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_010_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),              //          .valid
		.src0_data          (rsp_demux_010_src0_data),               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                  //      sink.ready
		.sink_channel       (router_012_src_channel),                //          .channel
		.sink_data          (router_012_src_data),                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_012_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),              //          .valid
		.src0_data          (rsp_demux_011_src0_data),               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                  //      sink.ready
		.sink_channel       (router_013_src_channel),                //          .channel
		.sink_data          (router_013_src_data),                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_013_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),              //          .valid
		.src0_data          (rsp_demux_012_src0_data),               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                  //      sink.ready
		.sink_channel       (router_014_src_channel),                //          .channel
		.sink_data          (router_014_src_data),                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_014_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),              //          .valid
		.src0_data          (rsp_demux_013_src0_data),               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_014 (
		.clk                (altpll_c0_clk),                        //       clk.clk
		.reset              (ir_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                 //      sink.ready
		.sink_channel       (router_015_src_channel),               //          .channel
		.sink_data          (router_015_src_data),                  //          .data
		.sink_startofpacket (router_015_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),           //          .endofpacket
		.sink_valid         (router_015_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),             //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),             //          .valid
		.src0_data          (rsp_demux_014_src0_data),              //          .data
		.src0_channel       (rsp_demux_014_src0_channel),           //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux rsp_demux_015 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                  //      sink.ready
		.sink_channel       (router_016_src_channel),                //          .channel
		.sink_data          (router_016_src_data),                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_016_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),              //          .valid
		.src0_data          (rsp_demux_015_src0_data),               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux_016 rsp_demux_016 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                        //      sink.ready
		.sink_channel       (router_017_src_channel),                      //          .channel
		.sink_data          (router_017_src_data),                         //          .data
		.sink_startofpacket (router_017_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_017_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_016_src0_data),                     //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)               //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux_016 rsp_demux_017 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                        //      sink.ready
		.sink_channel       (router_018_src_channel),                      //          .channel
		.sink_data          (router_018_src_data),                         //          .data
		.sink_startofpacket (router_018_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_018_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_017_src0_data),                     //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)               //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_demux_016 rsp_demux_018 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (to_sw_sig_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                        //      sink.ready
		.sink_channel       (router_019_src_channel),                      //          .channel
		.sink_data          (router_019_src_data),                         //          .data
		.sink_startofpacket (router_019_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_019_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_018_src0_data),                     //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)               //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (altpll_c2_clk),                                          //       clk.clk
		.reset                (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                      //       src.ready
		.src_valid            (rsp_mux_src_valid),                                      //          .valid
		.src_data             (rsp_mux_src_data),                                       //          .data
		.src_channel          (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready          (crosser_019_out_ready),                                  //     sink0.ready
		.sink0_valid          (crosser_019_out_valid),                                  //          .valid
		.sink0_channel        (crosser_019_out_channel),                                //          .channel
		.sink0_data           (crosser_019_out_data),                                   //          .data
		.sink0_startofpacket  (crosser_019_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket    (crosser_019_out_endofpacket),                            //          .endofpacket
		.sink1_ready          (crosser_020_out_ready),                                  //     sink1.ready
		.sink1_valid          (crosser_020_out_valid),                                  //          .valid
		.sink1_channel        (crosser_020_out_channel),                                //          .channel
		.sink1_data           (crosser_020_out_data),                                   //          .data
		.sink1_startofpacket  (crosser_020_out_startofpacket),                          //          .startofpacket
		.sink1_endofpacket    (crosser_020_out_endofpacket),                            //          .endofpacket
		.sink2_ready          (crosser_021_out_ready),                                  //     sink2.ready
		.sink2_valid          (crosser_021_out_valid),                                  //          .valid
		.sink2_channel        (crosser_021_out_channel),                                //          .channel
		.sink2_data           (crosser_021_out_data),                                   //          .data
		.sink2_startofpacket  (crosser_021_out_startofpacket),                          //          .startofpacket
		.sink2_endofpacket    (crosser_021_out_endofpacket),                            //          .endofpacket
		.sink3_ready          (crosser_022_out_ready),                                  //     sink3.ready
		.sink3_valid          (crosser_022_out_valid),                                  //          .valid
		.sink3_channel        (crosser_022_out_channel),                                //          .channel
		.sink3_data           (crosser_022_out_data),                                   //          .data
		.sink3_startofpacket  (crosser_022_out_startofpacket),                          //          .startofpacket
		.sink3_endofpacket    (crosser_022_out_endofpacket),                            //          .endofpacket
		.sink4_ready          (crosser_023_out_ready),                                  //     sink4.ready
		.sink4_valid          (crosser_023_out_valid),                                  //          .valid
		.sink4_channel        (crosser_023_out_channel),                                //          .channel
		.sink4_data           (crosser_023_out_data),                                   //          .data
		.sink4_startofpacket  (crosser_023_out_startofpacket),                          //          .startofpacket
		.sink4_endofpacket    (crosser_023_out_endofpacket),                            //          .endofpacket
		.sink5_ready          (crosser_024_out_ready),                                  //     sink5.ready
		.sink5_valid          (crosser_024_out_valid),                                  //          .valid
		.sink5_channel        (crosser_024_out_channel),                                //          .channel
		.sink5_data           (crosser_024_out_data),                                   //          .data
		.sink5_startofpacket  (crosser_024_out_startofpacket),                          //          .startofpacket
		.sink5_endofpacket    (crosser_024_out_endofpacket),                            //          .endofpacket
		.sink6_ready          (crosser_025_out_ready),                                  //     sink6.ready
		.sink6_valid          (crosser_025_out_valid),                                  //          .valid
		.sink6_channel        (crosser_025_out_channel),                                //          .channel
		.sink6_data           (crosser_025_out_data),                                   //          .data
		.sink6_startofpacket  (crosser_025_out_startofpacket),                          //          .startofpacket
		.sink6_endofpacket    (crosser_025_out_endofpacket),                            //          .endofpacket
		.sink7_ready          (crosser_026_out_ready),                                  //     sink7.ready
		.sink7_valid          (crosser_026_out_valid),                                  //          .valid
		.sink7_channel        (crosser_026_out_channel),                                //          .channel
		.sink7_data           (crosser_026_out_data),                                   //          .data
		.sink7_startofpacket  (crosser_026_out_startofpacket),                          //          .startofpacket
		.sink7_endofpacket    (crosser_026_out_endofpacket),                            //          .endofpacket
		.sink8_ready          (crosser_027_out_ready),                                  //     sink8.ready
		.sink8_valid          (crosser_027_out_valid),                                  //          .valid
		.sink8_channel        (crosser_027_out_channel),                                //          .channel
		.sink8_data           (crosser_027_out_data),                                   //          .data
		.sink8_startofpacket  (crosser_027_out_startofpacket),                          //          .startofpacket
		.sink8_endofpacket    (crosser_027_out_endofpacket),                            //          .endofpacket
		.sink9_ready          (crosser_028_out_ready),                                  //     sink9.ready
		.sink9_valid          (crosser_028_out_valid),                                  //          .valid
		.sink9_channel        (crosser_028_out_channel),                                //          .channel
		.sink9_data           (crosser_028_out_data),                                   //          .data
		.sink9_startofpacket  (crosser_028_out_startofpacket),                          //          .startofpacket
		.sink9_endofpacket    (crosser_028_out_endofpacket),                            //          .endofpacket
		.sink10_ready         (crosser_029_out_ready),                                  //    sink10.ready
		.sink10_valid         (crosser_029_out_valid),                                  //          .valid
		.sink10_channel       (crosser_029_out_channel),                                //          .channel
		.sink10_data          (crosser_029_out_data),                                   //          .data
		.sink10_startofpacket (crosser_029_out_startofpacket),                          //          .startofpacket
		.sink10_endofpacket   (crosser_029_out_endofpacket),                            //          .endofpacket
		.sink11_ready         (crosser_030_out_ready),                                  //    sink11.ready
		.sink11_valid         (crosser_030_out_valid),                                  //          .valid
		.sink11_channel       (crosser_030_out_channel),                                //          .channel
		.sink11_data          (crosser_030_out_data),                                   //          .data
		.sink11_startofpacket (crosser_030_out_startofpacket),                          //          .startofpacket
		.sink11_endofpacket   (crosser_030_out_endofpacket),                            //          .endofpacket
		.sink12_ready         (crosser_031_out_ready),                                  //    sink12.ready
		.sink12_valid         (crosser_031_out_valid),                                  //          .valid
		.sink12_channel       (crosser_031_out_channel),                                //          .channel
		.sink12_data          (crosser_031_out_data),                                   //          .data
		.sink12_startofpacket (crosser_031_out_startofpacket),                          //          .startofpacket
		.sink12_endofpacket   (crosser_031_out_endofpacket),                            //          .endofpacket
		.sink13_ready         (crosser_032_out_ready),                                  //    sink13.ready
		.sink13_valid         (crosser_032_out_valid),                                  //          .valid
		.sink13_channel       (crosser_032_out_channel),                                //          .channel
		.sink13_data          (crosser_032_out_data),                                   //          .data
		.sink13_startofpacket (crosser_032_out_startofpacket),                          //          .startofpacket
		.sink13_endofpacket   (crosser_032_out_endofpacket),                            //          .endofpacket
		.sink14_ready         (crosser_033_out_ready),                                  //    sink14.ready
		.sink14_valid         (crosser_033_out_valid),                                  //          .valid
		.sink14_channel       (crosser_033_out_channel),                                //          .channel
		.sink14_data          (crosser_033_out_data),                                   //          .data
		.sink14_startofpacket (crosser_033_out_startofpacket),                          //          .startofpacket
		.sink14_endofpacket   (crosser_033_out_endofpacket),                            //          .endofpacket
		.sink15_ready         (crosser_034_out_ready),                                  //    sink15.ready
		.sink15_valid         (crosser_034_out_valid),                                  //          .valid
		.sink15_channel       (crosser_034_out_channel),                                //          .channel
		.sink15_data          (crosser_034_out_data),                                   //          .data
		.sink15_startofpacket (crosser_034_out_startofpacket),                          //          .startofpacket
		.sink15_endofpacket   (crosser_034_out_endofpacket),                            //          .endofpacket
		.sink16_ready         (crosser_035_out_ready),                                  //    sink16.ready
		.sink16_valid         (crosser_035_out_valid),                                  //          .valid
		.sink16_channel       (crosser_035_out_channel),                                //          .channel
		.sink16_data          (crosser_035_out_data),                                   //          .data
		.sink16_startofpacket (crosser_035_out_startofpacket),                          //          .startofpacket
		.sink16_endofpacket   (crosser_035_out_endofpacket),                            //          .endofpacket
		.sink17_ready         (crosser_036_out_ready),                                  //    sink17.ready
		.sink17_valid         (crosser_036_out_valid),                                  //          .valid
		.sink17_channel       (crosser_036_out_channel),                                //          .channel
		.sink17_data          (crosser_036_out_data),                                   //          .data
		.sink17_startofpacket (crosser_036_out_startofpacket),                          //          .startofpacket
		.sink17_endofpacket   (crosser_036_out_endofpacket),                            //          .endofpacket
		.sink18_ready         (crosser_037_out_ready),                                  //    sink18.ready
		.sink18_valid         (crosser_037_out_valid),                                  //          .valid
		.sink18_channel       (crosser_037_out_channel),                                //          .channel
		.sink18_data          (crosser_037_out_data),                                   //          .data
		.sink18_startofpacket (crosser_037_out_startofpacket),                          //          .startofpacket
		.sink18_endofpacket   (crosser_037_out_endofpacket)                             //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_src0_data),                                    //              .data
		.out_ready         (crosser_out_ready),                                      //           out.ready
		.out_valid         (crosser_out_valid),                                      //              .valid
		.out_startofpacket (crosser_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_out_channel),                                    //              .channel
		.out_data          (crosser_out_data),                                       //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                 //              .channel
		.in_data           (cmd_demux_src1_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                  //           out.ready
		.out_valid         (crosser_001_out_valid),                                  //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                //              .channel
		.out_data          (crosser_001_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                 //              .channel
		.in_data           (cmd_demux_src2_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                  //           out.ready
		.out_valid         (crosser_002_out_valid),                                  //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                //              .channel
		.out_data          (crosser_002_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                 //              .channel
		.in_data           (cmd_demux_src3_data),                                    //              .data
		.out_ready         (crosser_003_out_ready),                                  //           out.ready
		.out_valid         (crosser_003_out_valid),                                  //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                //              .channel
		.out_data          (crosser_003_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                 //              .channel
		.in_data           (cmd_demux_src4_data),                                    //              .data
		.out_ready         (crosser_004_out_ready),                                  //           out.ready
		.out_valid         (crosser_004_out_valid),                                  //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                //              .channel
		.out_data          (crosser_004_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                 //              .channel
		.in_data           (cmd_demux_src5_data),                                    //              .data
		.out_ready         (crosser_005_out_ready),                                  //           out.ready
		.out_valid         (crosser_005_out_valid),                                  //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                //              .channel
		.out_data          (crosser_005_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (epp_i2c_scl_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                 //              .channel
		.in_data           (cmd_demux_src6_data),                                    //              .data
		.out_ready         (crosser_006_out_ready),                                  //           out.ready
		.out_valid         (crosser_006_out_valid),                                  //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                //              .channel
		.out_data          (crosser_006_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                                 //              .channel
		.in_data           (cmd_demux_src7_data),                                    //              .data
		.out_ready         (crosser_007_out_ready),                                  //           out.ready
		.out_valid         (crosser_007_out_valid),                                  //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                //              .channel
		.out_data          (crosser_007_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src8_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                                 //              .channel
		.in_data           (cmd_demux_src8_data),                                    //              .data
		.out_ready         (crosser_008_out_ready),                                  //           out.ready
		.out_valid         (crosser_008_out_valid),                                  //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                //              .channel
		.out_data          (crosser_008_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src9_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                                 //              .channel
		.in_data           (cmd_demux_src9_data),                                    //              .data
		.out_ready         (crosser_009_out_ready),                                  //           out.ready
		.out_valid         (crosser_009_out_valid),                                  //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                //              .channel
		.out_data          (crosser_009_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src10_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                                //              .channel
		.in_data           (cmd_demux_src10_data),                                   //              .data
		.out_ready         (crosser_010_out_ready),                                  //           out.ready
		.out_valid         (crosser_010_out_valid),                                  //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                //              .channel
		.out_data          (crosser_010_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src11_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src11_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src11_channel),                                //              .channel
		.in_data           (cmd_demux_src11_data),                                   //              .data
		.out_ready         (crosser_011_out_ready),                                  //           out.ready
		.out_valid         (crosser_011_out_valid),                                  //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                //              .channel
		.out_data          (crosser_011_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src12_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                                //              .channel
		.in_data           (cmd_demux_src12_data),                                   //              .data
		.out_ready         (crosser_012_out_ready),                                  //           out.ready
		.out_valid         (crosser_012_out_valid),                                  //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                //              .channel
		.out_data          (crosser_012_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src13_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                                //              .channel
		.in_data           (cmd_demux_src13_data),                                   //              .data
		.out_ready         (crosser_013_out_ready),                                  //           out.ready
		.out_valid         (crosser_013_out_valid),                                  //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                //              .channel
		.out_data          (crosser_013_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (ir_reset_reset_bridge_in_reset_reset),                   // out_clk_reset.reset
		.in_ready          (cmd_demux_src14_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src14_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src14_channel),                                //              .channel
		.in_data           (cmd_demux_src14_data),                                   //              .data
		.out_ready         (crosser_014_out_ready),                                  //           out.ready
		.out_valid         (crosser_014_out_valid),                                  //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                //              .channel
		.out_data          (crosser_014_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                          //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src15_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                                //              .channel
		.in_data           (cmd_demux_src15_data),                                   //              .data
		.out_ready         (crosser_015_out_ready),                                  //           out.ready
		.out_valid         (crosser_015_out_valid),                                  //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                //              .channel
		.out_data          (crosser_015_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                            //       out_clk.clk
		.out_reset         (to_sw_sig_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (cmd_demux_src16_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src16_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src16_channel),                                //              .channel
		.in_data           (cmd_demux_src16_data),                                   //              .data
		.out_ready         (crosser_016_out_ready),                                  //           out.ready
		.out_valid         (crosser_016_out_valid),                                  //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                //              .channel
		.out_data          (crosser_016_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                            //       out_clk.clk
		.out_reset         (to_sw_sig_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src17_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                                //              .channel
		.in_data           (cmd_demux_src17_data),                                   //              .data
		.out_ready         (crosser_017_out_ready),                                  //           out.ready
		.out_valid         (crosser_017_out_valid),                                  //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                //              .channel
		.out_data          (crosser_017_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (altpll_c2_clk),                                          //        in_clk.clk
		.in_reset          (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                            //       out_clk.clk
		.out_reset         (to_sw_sig_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (cmd_demux_src18_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src18_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src18_channel),                                //              .channel
		.in_data           (cmd_demux_src18_data),                                   //              .data
		.out_ready         (crosser_018_out_ready),                                  //           out.ready
		.out_valid         (crosser_018_out_valid),                                  //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                //              .channel
		.out_data          (crosser_018_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_src0_data),                                    //              .data
		.out_ready         (crosser_019_out_ready),                                  //           out.ready
		.out_valid         (crosser_019_out_valid),                                  //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                //              .channel
		.out_data          (crosser_019_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                             //              .channel
		.in_data           (rsp_demux_001_src0_data),                                //              .data
		.out_ready         (crosser_020_out_ready),                                  //           out.ready
		.out_valid         (crosser_020_out_valid),                                  //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                //              .channel
		.out_data          (crosser_020_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                             //              .channel
		.in_data           (rsp_demux_002_src0_data),                                //              .data
		.out_ready         (crosser_021_out_ready),                                  //           out.ready
		.out_valid         (crosser_021_out_valid),                                  //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_021_out_channel),                                //              .channel
		.out_data          (crosser_021_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                             //              .channel
		.in_data           (rsp_demux_003_src0_data),                                //              .data
		.out_ready         (crosser_022_out_ready),                                  //           out.ready
		.out_valid         (crosser_022_out_valid),                                  //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                //              .channel
		.out_data          (crosser_022_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                             //              .channel
		.in_data           (rsp_demux_004_src0_data),                                //              .data
		.out_ready         (crosser_023_out_ready),                                  //           out.ready
		.out_valid         (crosser_023_out_valid),                                  //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                //              .channel
		.out_data          (crosser_023_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                             //              .channel
		.in_data           (rsp_demux_005_src0_data),                                //              .data
		.out_ready         (crosser_024_out_ready),                                  //           out.ready
		.out_valid         (crosser_024_out_valid),                                  //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_024_out_channel),                                //              .channel
		.out_data          (crosser_024_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (epp_i2c_scl_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                             //              .channel
		.in_data           (rsp_demux_006_src0_data),                                //              .data
		.out_ready         (crosser_025_out_ready),                                  //           out.ready
		.out_valid         (crosser_025_out_valid),                                  //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_025_out_channel),                                //              .channel
		.out_data          (crosser_025_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                             //              .channel
		.in_data           (rsp_demux_007_src0_data),                                //              .data
		.out_ready         (crosser_026_out_ready),                                  //           out.ready
		.out_valid         (crosser_026_out_valid),                                  //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_026_out_channel),                                //              .channel
		.out_data          (crosser_026_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                             //              .channel
		.in_data           (rsp_demux_008_src0_data),                                //              .data
		.out_ready         (crosser_027_out_ready),                                  //           out.ready
		.out_valid         (crosser_027_out_valid),                                  //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_027_out_channel),                                //              .channel
		.out_data          (crosser_027_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_028 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                             //              .channel
		.in_data           (rsp_demux_009_src0_data),                                //              .data
		.out_ready         (crosser_028_out_ready),                                  //           out.ready
		.out_valid         (crosser_028_out_valid),                                  //              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_028_out_channel),                                //              .channel
		.out_data          (crosser_028_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_029 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                             //              .channel
		.in_data           (rsp_demux_010_src0_data),                                //              .data
		.out_ready         (crosser_029_out_ready),                                  //           out.ready
		.out_valid         (crosser_029_out_valid),                                  //              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_029_out_channel),                                //              .channel
		.out_data          (crosser_029_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_030 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_011_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_011_src0_channel),                             //              .channel
		.in_data           (rsp_demux_011_src0_data),                                //              .data
		.out_ready         (crosser_030_out_ready),                                  //           out.ready
		.out_valid         (crosser_030_out_valid),                                  //              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_030_out_channel),                                //              .channel
		.out_data          (crosser_030_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_031 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                             //              .channel
		.in_data           (rsp_demux_012_src0_data),                                //              .data
		.out_ready         (crosser_031_out_ready),                                  //           out.ready
		.out_valid         (crosser_031_out_valid),                                  //              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_031_out_channel),                                //              .channel
		.out_data          (crosser_031_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_032 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                             //              .channel
		.in_data           (rsp_demux_013_src0_data),                                //              .data
		.out_ready         (crosser_032_out_ready),                                  //           out.ready
		.out_valid         (crosser_032_out_valid),                                  //              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_032_out_channel),                                //              .channel
		.out_data          (crosser_032_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_033 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (ir_reset_reset_bridge_in_reset_reset),                   //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                             //              .channel
		.in_data           (rsp_demux_014_src0_data),                                //              .data
		.out_ready         (crosser_033_out_ready),                                  //           out.ready
		.out_valid         (crosser_033_out_valid),                                  //              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_033_out_channel),                                //              .channel
		.out_data          (crosser_033_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_034 (
		.in_clk            (altpll_c0_clk),                                          //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                             //              .channel
		.in_data           (rsp_demux_015_src0_data),                                //              .data
		.out_ready         (crosser_034_out_ready),                                  //           out.ready
		.out_valid         (crosser_034_out_valid),                                  //              .valid
		.out_startofpacket (crosser_034_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_034_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_034_out_channel),                                //              .channel
		.out_data          (crosser_034_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_035 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                            //        in_clk.clk
		.in_reset          (to_sw_sig_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                             //              .channel
		.in_data           (rsp_demux_016_src0_data),                                //              .data
		.out_ready         (crosser_035_out_ready),                                  //           out.ready
		.out_valid         (crosser_035_out_valid),                                  //              .valid
		.out_startofpacket (crosser_035_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_035_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_035_out_channel),                                //              .channel
		.out_data          (crosser_035_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_036 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                            //        in_clk.clk
		.in_reset          (to_sw_sig_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                             //              .channel
		.in_data           (rsp_demux_017_src0_data),                                //              .data
		.out_ready         (crosser_036_out_ready),                                  //           out.ready
		.out_valid         (crosser_036_out_valid),                                  //              .valid
		.out_startofpacket (crosser_036_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_036_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_036_out_channel),                                //              .channel
		.out_data          (crosser_036_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_037 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                            //        in_clk.clk
		.in_reset          (to_sw_sig_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (altpll_c2_clk),                                          //       out_clk.clk
		.out_reset         (clock_crossing_io_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_018_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_018_src0_channel),                             //              .channel
		.in_data           (rsp_demux_018_src0_data),                                //              .data
		.out_ready         (crosser_037_out_ready),                                  //           out.ready
		.out_valid         (crosser_037_out_valid),                                  //              .valid
		.out_startofpacket (crosser_037_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_037_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_037_out_channel),                                //              .channel
		.out_data          (crosser_037_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (lcd_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (lcd_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (lcd_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sd_clk_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (sd_clk_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (sd_clk_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sd_cmd_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (sd_cmd_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (sd_cmd_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sd_dat_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (sd_dat_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (sd_dat_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sd_wp_n_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sd_wp_n_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sd_wp_n_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_c0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (epp_i2c_scl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (epp_i2c_scl_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (epp_i2c_scl_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (epp_i2c_scl_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_c0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (epp_i2c_sda_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (epp_i2c_sda_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (epp_i2c_sda_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)          //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_scl_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_scl_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_scl_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_sda_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_sda_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_sda_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledg_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (ledg_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (ledg_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (altpll_c0_clk),                        // in_clk_0.clk
		.in_rst_0_reset (ir_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ir_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ir_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ir_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),     //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),    //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),    //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)     //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (lcd_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rs232_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (rs232_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (rs232_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)      //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                 // in_clk_0.clk
		.in_rst_0_reset (to_sw_sig_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (to_sw_sig_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (to_sw_sig_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (to_sw_sig_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)            //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                 // in_clk_0.clk
		.in_rst_0_reset (to_sw_sig_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (to_hw_sig_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (to_hw_sig_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (to_hw_sig_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)            //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                 // in_clk_0.clk
		.in_rst_0_reset (to_sw_sig_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (to_hw_port_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (to_hw_port_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (to_hw_port_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)            //         .error
	);

endmodule
